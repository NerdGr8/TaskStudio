//
//  TaskStudioStyleKit.swift
//  ProjectName
//
//  Created by Nerudo on 2017/02/09.
//  Copyright Â© 2017 StormShip. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class TaskStudioStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let strokeColor: UIColor = UIColor(red: 0.045, green: 0.384, blue: 0.801, alpha: 1.000)
        static let fillColor2: UIColor = UIColor(red: 0.340, green: 0.000, blue: 0.333, alpha: 1.000)
        static let fillColor3: UIColor = UIColor(red: 0.045, green: 0.384, blue: 0.801, alpha: 1.000)
        static let fillColor4: UIColor = UIColor(red: 0.142, green: 0.038, blue: 0.278, alpha: 0.700)
        static let fillColor5: UIColor = UIColor(red: 0.148, green: 0.036, blue: 0.289, alpha: 1.000)
        static var splash_logo_1: UIImage?

        static var imageOfIcon_titleImage: UIImage?
        static var icon_titleImageTargets: [AnyObject]?
        static var imageOfIcon_titleImage40: UIImage?
        static var icon_titleImage40Targets: [AnyObject]?
    }

    //// Colors

    public dynamic class var strokeColor: UIColor { return Cache.strokeColor }
    public dynamic class var fillColor2: UIColor { return Cache.fillColor2 }
    public dynamic class var fillColor3: UIColor { return Cache.fillColor3 }
    public dynamic class var fillColor4: UIColor { return Cache.fillColor4 }
    public dynamic class var fillColor5: UIColor { return Cache.fillColor5 }

    //// Images

    public dynamic class var splash_logo_1: UIImage {
        if Cache.splash_logo_1 == nil {
            Cache.splash_logo_1 = UIImage(named: "splash_logo_1.png")!
        }
        return Cache.splash_logo_1!
    }

    //// Drawing Methods

    public dynamic class func drawIcon_60(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 60, height: 60))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Icon
        context.saveGState()
        context.translateBy(x: 14, y: 16)
        context.scaleBy(x: 0.1, y: 0.1)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        TaskStudioStyleKit.fillColor3.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_80(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 80, height: 80), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 80, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 80, y: resizedFrame.height / 80)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 80, height: 80))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Icon
        context.saveGState()
        context.translateBy(x: 12, y: 12)
        context.scaleBy(x: 0.2, y: 0.2)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        TaskStudioStyleKit.fillColor3.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_29(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 29, height: 29), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 29, height: 29), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 29, y: resizedFrame.height / 29)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 29, height: 29))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Icon
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        context.scaleBy(x: 0.08, y: 0.08)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        TaskStudioStyleKit.fillColor3.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 20, height: 20))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Icon
        context.saveGState()
        context.translateBy(x: 6, y: 6)
        context.scaleBy(x: 0.03, y: 0.03)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        TaskStudioStyleKit.fillColor3.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_40(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 40, height: 40))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Icon
        context.saveGState()
        context.translateBy(x: 9, y: 9)
        context.scaleBy(x: 0.08, y: 0.08)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        TaskStudioStyleKit.fillColor3.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_titleImage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Icon
        context.saveGState()
        context.translateBy(x: 6, y: 6)
        context.scaleBy(x: 0.03, y: 0.03)

        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: -166.67, y: -166.67)
        context.scaleBy(x: 33.33, y: 33.33)

        context.saveGState()
        context.setAlpha(0.9)
        context.setBlendMode(.multiply)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 18, height: 18))
        TaskStudioStyleKit.strokeColor.setFill()
        ovalPath.fill()

        context.restoreGState()

        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        UIColor.white.setFill()
        bezier4Path.fill()


        context.endTransparencyLayer()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_titleImage40(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 40, height: 40))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Icon
        context.saveGState()
        context.translateBy(x: 5, y: 4)
        context.scaleBy(x: 0.11, y: 0.11)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        TaskStudioStyleKit.fillColor3.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class var imageOfIcon_titleImage: UIImage {
        if Cache.imageOfIcon_titleImage != nil {
            return Cache.imageOfIcon_titleImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            TaskStudioStyleKit.drawIcon_titleImage()

        Cache.imageOfIcon_titleImage = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_titleImage!
    }

    public dynamic class var imageOfIcon_titleImage40: UIImage {
        if Cache.imageOfIcon_titleImage40 != nil {
            return Cache.imageOfIcon_titleImage40!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            TaskStudioStyleKit.drawIcon_titleImage40()

        Cache.imageOfIcon_titleImage40 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_titleImage40!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var icon_titleImageTargets: [AnyObject]! {
        get { return Cache.icon_titleImageTargets }
        set {
            Cache.icon_titleImageTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TaskStudioStyleKit.imageOfIcon_titleImage)
            }
        }
    }

    @IBOutlet dynamic var icon_titleImage40Targets: [AnyObject]! {
        get { return Cache.icon_titleImage40Targets }
        set {
            Cache.icon_titleImage40Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TaskStudioStyleKit.imageOfIcon_titleImage40)
            }
        }
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
