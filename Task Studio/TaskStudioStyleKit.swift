//
//  TaskStudioStyleKit.swift
//  ProjectName
//
//  Created by Nerudo on 2017/02/23.
//  Copyright Â© 2017 StormShip. All rights reserved.
//
//  Generated by PaintCode
//  http://www.paintcodeapp.com
//



import UIKit

public class TaskStudioStyleKit : NSObject {

    //// Cache

    private struct Cache {
        static let strokeColor: UIColor = UIColor(red: 0.045, green: 0.384, blue: 0.801, alpha: 1.000)
        static let fillColor2: UIColor = UIColor(red: 0.340, green: 0.000, blue: 0.333, alpha: 1.000)
        static let fillColor3: UIColor = UIColor(red: 0.045, green: 0.384, blue: 0.801, alpha: 1.000)
        static let fillColor4: UIColor = UIColor(red: 0.142, green: 0.038, blue: 0.278, alpha: 0.700)
        static let fillColor5: UIColor = UIColor(red: 0.148, green: 0.036, blue: 0.289, alpha: 1.000)
        static var splash_logo_1: UIImage?

        static var imageOfIcon_titleImage: UIImage?
        static var icon_titleImageTargets: [AnyObject]?
        static var imageOfIcon_titleImage40: UIImage?
        static var icon_titleImage40Targets: [AnyObject]?
        static var imageOfTasks_25: UIImage?
        static var tasks_25Targets: [AnyObject]?
        static var imageOfSpeech_bubble_25: UIImage?
        static var speech_bubble_25Targets: [AnyObject]?
        static var imageOfSettings_25: UIImage?
        static var settings_25Targets: [AnyObject]?
        static var imageOfTasks_selected: UIImage?
        static var tasks_selectedTargets: [AnyObject]?
        static var imageOfSettings_selected: UIImage?
        static var settings_selectedTargets: [AnyObject]?
        static var imageOfSpeech_bubble_selected: UIImage?
        static var speech_bubble_selectedTargets: [AnyObject]?
    }

    //// Colors

    public dynamic class var strokeColor: UIColor { return Cache.strokeColor }
    public dynamic class var fillColor2: UIColor { return Cache.fillColor2 }
    public dynamic class var fillColor3: UIColor { return Cache.fillColor3 }
    public dynamic class var fillColor4: UIColor { return Cache.fillColor4 }
    public dynamic class var fillColor5: UIColor { return Cache.fillColor5 }

    //// Images

    public dynamic class var splash_logo_1: UIImage {
        if Cache.splash_logo_1 == nil {
            Cache.splash_logo_1 = UIImage(named: "splash_logo_1.png")!
        }
        return Cache.splash_logo_1!
    }

    //// Drawing Methods

    public dynamic class func drawIcon_60(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 60, height: 60), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 60, height: 60), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 60, y: resizedFrame.height / 60)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 60, height: 60))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Icon
        context.saveGState()
        context.translateBy(x: 14, y: 16)
        context.scaleBy(x: 0.1, y: 0.1)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        TaskStudioStyleKit.fillColor3.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_80(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 80, height: 80), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 80, height: 80), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 80, y: resizedFrame.height / 80)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 80, height: 80))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Icon
        context.saveGState()
        context.translateBy(x: 12, y: 12)
        context.scaleBy(x: 0.2, y: 0.2)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        TaskStudioStyleKit.fillColor3.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_29(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 29, height: 29), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 29, height: 29), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 29, y: resizedFrame.height / 29)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 29, height: 29))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Icon
        context.saveGState()
        context.translateBy(x: 3, y: 3)
        context.scaleBy(x: 0.08, y: 0.08)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        TaskStudioStyleKit.fillColor3.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_20(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 20, height: 20))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Icon
        context.saveGState()
        context.translateBy(x: 6, y: 6)
        context.scaleBy(x: 0.03, y: 0.03)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        TaskStudioStyleKit.fillColor3.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_40(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 40, height: 40))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Icon
        context.saveGState()
        context.translateBy(x: 9, y: 9)
        context.scaleBy(x: 0.08, y: 0.08)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        TaskStudioStyleKit.fillColor3.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_titleImage(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 20, height: 20), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 20, height: 20), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 20, y: resizedFrame.height / 20)


        //// Icon
        context.saveGState()
        context.translateBy(x: 6, y: 6)
        context.scaleBy(x: 0.03, y: 0.03)

        context.beginTransparencyLayer(auxiliaryInfo: nil)


        //// Oval Drawing
        context.saveGState()
        context.translateBy(x: -166.67, y: -166.67)
        context.scaleBy(x: 33.33, y: 33.33)

        context.saveGState()
        context.setAlpha(0.9)
        context.setBlendMode(.multiply)

        let ovalPath = UIBezierPath(ovalIn: CGRect(x: 0, y: 0, width: 18, height: 18))
        TaskStudioStyleKit.strokeColor.setFill()
        ovalPath.fill()

        context.restoreGState()

        context.restoreGState()


        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        UIColor.white.setFill()
        bezier4Path.fill()


        context.endTransparencyLayer()

        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawIcon_titleImage40(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 40, height: 40), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 40, height: 40), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 40, y: resizedFrame.height / 40)


        //// Rectangle Drawing
        let rectanglePath = UIBezierPath(rect: CGRect(x: 0, y: 0, width: 40, height: 40))
        UIColor.white.setFill()
        rectanglePath.fill()


        //// Icon
        context.saveGState()
        context.translateBy(x: 5, y: 4)
        context.scaleBy(x: 0.11, y: 0.11)



        //// Bezier 2 Drawing
        let bezier2Path = UIBezierPath()
        bezier2Path.move(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier2Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier2Path.addLine(to: CGPoint(x: 23.33, y: 96.33))
        bezier2Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier2Path.addLine(to: CGPoint(x: 211.29, y: 200))
        bezier2Path.addLine(to: CGPoint(x: 211.33, y: 27.5))
        bezier2Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier2Path.close()
        TaskStudioStyleKit.fillColor2.setFill()
        bezier2Path.fill()


        //// Bezier 3 Drawing
        let bezier3Path = UIBezierPath()
        bezier3Path.move(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.addLine(to: CGPoint(x: 280.78, y: 253.5))
        bezier3Path.addLine(to: CGPoint(x: 213.78, y: 282.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 96.5))
        bezier3Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier3Path.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezier3Path.fill()


        //// Bezier 4 Drawing
        let bezier4Path = UIBezierPath()
        bezier4Path.move(to: CGPoint(x: 0, y: 72))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 59.5))
        bezier4Path.addLine(to: CGPoint(x: 27, y: 180.5))
        bezier4Path.addLine(to: CGPoint(x: 213, y: 0))
        bezier4Path.addLine(to: CGPoint(x: 280.78, y: 27.5))
        bezier4Path.addLine(to: CGPoint(x: 29.5, y: 227))
        bezier4Path.addLine(to: CGPoint(x: 0, y: 212))
        TaskStudioStyleKit.fillColor3.setFill()
        bezier4Path.fill()



        context.restoreGState()
        
        context.restoreGState()

    }

    public dynamic class func drawArrowleft(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 13.33, y: 5.33))
        bezierPath.addCurve(to: CGPoint(x: 14.28, y: 5.72), controlPoint1: CGPoint(x: 13.88, y: 5.33), controlPoint2: CGPoint(x: 13.88, y: 5.33))
        bezierPath.addCurve(to: CGPoint(x: 14.67, y: 6.67), controlPoint1: CGPoint(x: 14.67, y: 6.12), controlPoint2: CGPoint(x: 14.67, y: 6.12))
        bezierPath.addCurve(to: CGPoint(x: 14.27, y: 7.62), controlPoint1: CGPoint(x: 14.67, y: 7.23), controlPoint2: CGPoint(x: 14.67, y: 7.23))
        bezierPath.addLine(to: CGPoint(x: 7.22, y: 14.67))
        bezierPath.addLine(to: CGPoint(x: 28, y: 14.67))
        bezierPath.addCurve(to: CGPoint(x: 28.94, y: 15.06), controlPoint1: CGPoint(x: 28.55, y: 14.67), controlPoint2: CGPoint(x: 28.55, y: 14.67))
        bezierPath.addCurve(to: CGPoint(x: 29.33, y: 16), controlPoint1: CGPoint(x: 29.33, y: 15.45), controlPoint2: CGPoint(x: 29.33, y: 15.45))
        bezierPath.addCurve(to: CGPoint(x: 28.94, y: 16.94), controlPoint1: CGPoint(x: 29.33, y: 16.55), controlPoint2: CGPoint(x: 29.33, y: 16.55))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 17.34), controlPoint1: CGPoint(x: 28.55, y: 17.34), controlPoint2: CGPoint(x: 28.55, y: 17.34))
        bezierPath.addLine(to: CGPoint(x: 7.22, y: 17.34))
        bezierPath.addLine(to: CGPoint(x: 14.27, y: 24.39))
        bezierPath.addCurve(to: CGPoint(x: 14.67, y: 25.34), controlPoint1: CGPoint(x: 14.67, y: 24.77), controlPoint2: CGPoint(x: 14.67, y: 24.77))
        bezierPath.addCurve(to: CGPoint(x: 14.28, y: 26.28), controlPoint1: CGPoint(x: 14.67, y: 25.89), controlPoint2: CGPoint(x: 14.67, y: 25.89))
        bezierPath.addCurve(to: CGPoint(x: 13.33, y: 26.67), controlPoint1: CGPoint(x: 13.89, y: 26.67), controlPoint2: CGPoint(x: 13.89, y: 26.67))
        bezierPath.addCurve(to: CGPoint(x: 12.39, y: 26.28), controlPoint1: CGPoint(x: 12.77, y: 26.67), controlPoint2: CGPoint(x: 12.77, y: 26.67))
        bezierPath.addLine(to: CGPoint(x: 3.05, y: 16.95))
        bezierPath.addCurve(to: CGPoint(x: 2.67, y: 16), controlPoint1: CGPoint(x: 2.67, y: 16.55), controlPoint2: CGPoint(x: 2.67, y: 16.55))
        bezierPath.addCurve(to: CGPoint(x: 3.05, y: 15.06), controlPoint1: CGPoint(x: 2.67, y: 15.46), controlPoint2: CGPoint(x: 2.67, y: 15.46))
        bezierPath.addLine(to: CGPoint(x: 12.39, y: 5.72))
        bezierPath.addCurve(to: CGPoint(x: 13.33, y: 5.34), controlPoint1: CGPoint(x: 12.78, y: 5.34), controlPoint2: CGPoint(x: 12.78, y: 5.34))
        bezierPath.addLine(to: CGPoint(x: 13.33, y: 5.33))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawNotifications(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16, y: 1.33))
        bezierPath.addCurve(to: CGPoint(x: 19.25, y: 1.89), controlPoint1: CGPoint(x: 17.72, y: 1.33), controlPoint2: CGPoint(x: 17.72, y: 1.33))
        bezierPath.addCurve(to: CGPoint(x: 21.97, y: 3.43), controlPoint1: CGPoint(x: 20.78, y: 2.45), controlPoint2: CGPoint(x: 20.78, y: 2.45))
        bezierPath.addCurve(to: CGPoint(x: 24.1, y: 5.75), controlPoint1: CGPoint(x: 23.16, y: 4.4), controlPoint2: CGPoint(x: 23.16, y: 4.4))
        bezierPath.addCurve(to: CGPoint(x: 25.68, y: 8.67), controlPoint1: CGPoint(x: 25.05, y: 7.1), controlPoint2: CGPoint(x: 25.05, y: 7.1))
        bezierPath.addCurve(to: CGPoint(x: 26.67, y: 12), controlPoint1: CGPoint(x: 26.31, y: 10.24), controlPoint2: CGPoint(x: 26.31, y: 10.24))
        bezierPath.addCurve(to: CGPoint(x: 28.9, y: 20.35), controlPoint1: CGPoint(x: 27.72, y: 17.28), controlPoint2: CGPoint(x: 27.72, y: 17.28))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 25.33), controlPoint1: CGPoint(x: 30.08, y: 23.42), controlPoint2: CGPoint(x: 30.08, y: 23.42))
        bezierPath.addLine(to: CGPoint(x: 19.77, y: 25.33))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 26.66), controlPoint1: CGPoint(x: 20, y: 25.99), controlPoint2: CGPoint(x: 20, y: 25.99))
        bezierPath.addCurve(to: CGPoint(x: 18.83, y: 29.49), controlPoint1: CGPoint(x: 20, y: 28.32), controlPoint2: CGPoint(x: 20, y: 28.32))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 30.66), controlPoint1: CGPoint(x: 17.65, y: 30.66), controlPoint2: CGPoint(x: 17.65, y: 30.66))
        bezierPath.addCurve(to: CGPoint(x: 13.17, y: 29.49), controlPoint1: CGPoint(x: 14.34, y: 30.66), controlPoint2: CGPoint(x: 14.34, y: 30.66))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 26.66), controlPoint1: CGPoint(x: 12, y: 28.32), controlPoint2: CGPoint(x: 12, y: 28.32))
        bezierPath.addCurve(to: CGPoint(x: 12.23, y: 25.33), controlPoint1: CGPoint(x: 12, y: 25.99), controlPoint2: CGPoint(x: 12, y: 25.99))
        bezierPath.addLine(to: CGPoint(x: -0, y: 25.33))
        bezierPath.addCurve(to: CGPoint(x: 3.1, y: 20.35), controlPoint1: CGPoint(x: 1.92, y: 23.41), controlPoint2: CGPoint(x: 1.92, y: 23.41))
        bezierPath.addCurve(to: CGPoint(x: 5.33, y: 12), controlPoint1: CGPoint(x: 4.28, y: 17.28), controlPoint2: CGPoint(x: 4.28, y: 17.28))
        bezierPath.addCurve(to: CGPoint(x: 6.32, y: 8.67), controlPoint1: CGPoint(x: 5.69, y: 10.24), controlPoint2: CGPoint(x: 5.69, y: 10.24))
        bezierPath.addCurve(to: CGPoint(x: 7.89, y: 5.75), controlPoint1: CGPoint(x: 6.95, y: 7.1), controlPoint2: CGPoint(x: 6.95, y: 7.1))
        bezierPath.addCurve(to: CGPoint(x: 10.03, y: 3.43), controlPoint1: CGPoint(x: 8.84, y: 4.4), controlPoint2: CGPoint(x: 8.84, y: 4.4))
        bezierPath.addCurve(to: CGPoint(x: 12.75, y: 1.89), controlPoint1: CGPoint(x: 11.22, y: 2.45), controlPoint2: CGPoint(x: 11.22, y: 2.45))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 1.33), controlPoint1: CGPoint(x: 14.28, y: 1.33), controlPoint2: CGPoint(x: 14.28, y: 1.33))
        bezierPath.addLine(to: CGPoint(x: 16, y: 1.33))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 16, y: 25.33))
        bezierPath.addCurve(to: CGPoint(x: 15.06, y: 25.72), controlPoint1: CGPoint(x: 15.45, y: 25.33), controlPoint2: CGPoint(x: 15.45, y: 25.33))
        bezierPath.addCurve(to: CGPoint(x: 14.67, y: 26.67), controlPoint1: CGPoint(x: 14.67, y: 26.11), controlPoint2: CGPoint(x: 14.67, y: 26.11))
        bezierPath.addCurve(to: CGPoint(x: 15.06, y: 27.61), controlPoint1: CGPoint(x: 14.67, y: 27.22), controlPoint2: CGPoint(x: 14.67, y: 27.22))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 28), controlPoint1: CGPoint(x: 15.45, y: 28), controlPoint2: CGPoint(x: 15.45, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 16.94, y: 27.61), controlPoint1: CGPoint(x: 16.55, y: 28), controlPoint2: CGPoint(x: 16.55, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 17.33, y: 26.67), controlPoint1: CGPoint(x: 17.33, y: 27.22), controlPoint2: CGPoint(x: 17.33, y: 27.22))
        bezierPath.addCurve(to: CGPoint(x: 16.94, y: 25.72), controlPoint1: CGPoint(x: 17.33, y: 26.11), controlPoint2: CGPoint(x: 17.33, y: 26.11))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 25.33), controlPoint1: CGPoint(x: 16.55, y: 25.33), controlPoint2: CGPoint(x: 16.55, y: 25.33))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 16, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 13.72, y: 4.38), controlPoint1: CGPoint(x: 14.79, y: 4), controlPoint2: CGPoint(x: 14.79, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 11.9, y: 5.33), controlPoint1: CGPoint(x: 12.66, y: 4.75), controlPoint2: CGPoint(x: 12.66, y: 4.75))
        bezierPath.addCurve(to: CGPoint(x: 10.49, y: 6.73), controlPoint1: CGPoint(x: 11.14, y: 5.92), controlPoint2: CGPoint(x: 11.14, y: 5.92))
        bezierPath.addCurve(to: CGPoint(x: 9.43, y: 8.32), controlPoint1: CGPoint(x: 9.83, y: 7.55), controlPoint2: CGPoint(x: 9.83, y: 7.55))
        bezierPath.addCurve(to: CGPoint(x: 8.69, y: 9.97), controlPoint1: CGPoint(x: 9.02, y: 9.09), controlPoint2: CGPoint(x: 9.02, y: 9.09))
        bezierPath.addCurve(to: CGPoint(x: 8.21, y: 11.41), controlPoint1: CGPoint(x: 8.37, y: 10.84), controlPoint2: CGPoint(x: 8.37, y: 10.84))
        bezierPath.addCurve(to: CGPoint(x: 7.95, y: 12.52), controlPoint1: CGPoint(x: 8.05, y: 11.98), controlPoint2: CGPoint(x: 8.05, y: 11.98))
        bezierPath.addCurve(to: CGPoint(x: 5.01, y: 22.67), controlPoint1: CGPoint(x: 6.62, y: 19.24), controlPoint2: CGPoint(x: 6.62, y: 19.24))
        bezierPath.addLine(to: CGPoint(x: 26.99, y: 22.67))
        bezierPath.addCurve(to: CGPoint(x: 24.05, y: 12.52), controlPoint1: CGPoint(x: 25.39, y: 19.24), controlPoint2: CGPoint(x: 25.39, y: 19.24))
        bezierPath.addCurve(to: CGPoint(x: 23.79, y: 11.41), controlPoint1: CGPoint(x: 23.95, y: 11.98), controlPoint2: CGPoint(x: 23.95, y: 11.98))
        bezierPath.addCurve(to: CGPoint(x: 23.31, y: 9.97), controlPoint1: CGPoint(x: 23.64, y: 10.84), controlPoint2: CGPoint(x: 23.64, y: 10.84))
        bezierPath.addCurve(to: CGPoint(x: 22.57, y: 8.32), controlPoint1: CGPoint(x: 22.98, y: 9.09), controlPoint2: CGPoint(x: 22.98, y: 9.09))
        bezierPath.addCurve(to: CGPoint(x: 21.52, y: 6.73), controlPoint1: CGPoint(x: 22.17, y: 7.55), controlPoint2: CGPoint(x: 22.17, y: 7.55))
        bezierPath.addCurve(to: CGPoint(x: 20.11, y: 5.33), controlPoint1: CGPoint(x: 20.87, y: 5.92), controlPoint2: CGPoint(x: 20.87, y: 5.92))
        bezierPath.addCurve(to: CGPoint(x: 18.28, y: 4.38), controlPoint1: CGPoint(x: 19.35, y: 4.75), controlPoint2: CGPoint(x: 19.35, y: 4.75))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 4), controlPoint1: CGPoint(x: 17.21, y: 4), controlPoint2: CGPoint(x: 17.21, y: 4))
        bezierPath.addLine(to: CGPoint(x: 16, y: 4))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawChat(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 25.04, y: 18.67))
        bezierPath.addLine(to: CGPoint(x: 25.04, y: 6.19))
        bezierPath.addCurve(to: CGPoint(x: 22.81, y: 3.95), controlPoint1: CGPoint(x: 25.04, y: 4.95), controlPoint2: CGPoint(x: 24.04, y: 3.95))
        bezierPath.addLine(to: CGPoint(x: 3.23, y: 3.95))
        bezierPath.addCurve(to: CGPoint(x: 1, y: 6.19), controlPoint1: CGPoint(x: 2, y: 3.95), controlPoint2: CGPoint(x: 1, y: 4.95))
        bezierPath.addLine(to: CGPoint(x: 1, y: 18.67))
        bezierPath.addCurve(to: CGPoint(x: 3.23, y: 20.91), controlPoint1: CGPoint(x: 1, y: 19.91), controlPoint2: CGPoint(x: 2, y: 20.91))
        bezierPath.addLine(to: CGPoint(x: 6.96, y: 20.91))
        bezierPath.addLine(to: CGPoint(x: 6.96, y: 26.05))
        bezierPath.addLine(to: CGPoint(x: 12.67, y: 20.91))
        bezierPath.addLine(to: CGPoint(x: 22.8, y: 20.91))
        bezierPath.addCurve(to: CGPoint(x: 25.04, y: 18.67), controlPoint1: CGPoint(x: 24.04, y: 20.91), controlPoint2: CGPoint(x: 25.04, y: 19.91))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 28.77, y: 8.86))
        bezierPath.addLine(to: CGPoint(x: 25.97, y: 8.86))
        bezierPath.addCurve(to: CGPoint(x: 25.97, y: 19.77), controlPoint1: CGPoint(x: 25.97, y: 8.86), controlPoint2: CGPoint(x: 25.97, y: 18.83))
        bezierPath.addCurve(to: CGPoint(x: 23.81, y: 21.91), controlPoint1: CGPoint(x: 25.97, y: 20.7), controlPoint2: CGPoint(x: 24.75, y: 21.91))
        bezierPath.addCurve(to: CGPoint(x: 12.87, y: 21.96), controlPoint1: CGPoint(x: 22.88, y: 21.91), controlPoint2: CGPoint(x: 12.87, y: 21.96))
        bezierPath.addCurve(to: CGPoint(x: 15.11, y: 23.95), controlPoint1: CGPoint(x: 12.87, y: 23.2), controlPoint2: CGPoint(x: 13.87, y: 23.95))
        bezierPath.addLine(to: CGPoint(x: 19.41, y: 23.95))
        bezierPath.addLine(to: CGPoint(x: 25.04, y: 29.05))
        bezierPath.addLine(to: CGPoint(x: 25.03, y: 23.95))
        bezierPath.addLine(to: CGPoint(x: 28.77, y: 23.95))
        bezierPath.addCurve(to: CGPoint(x: 31, y: 21.96), controlPoint1: CGPoint(x: 30, y: 23.95), controlPoint2: CGPoint(x: 31, y: 23.2))
        bezierPath.addLine(to: CGPoint(x: 31, y: 11.03))
        bezierPath.addCurve(to: CGPoint(x: 28.77, y: 8.86), controlPoint1: CGPoint(x: 31, y: 9.8), controlPoint2: CGPoint(x: 30, y: 8.86))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawSettings(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16, y: 0))
        bezierPath.addCurve(to: CGPoint(x: 18.83, y: 1.17), controlPoint1: CGPoint(x: 17.66, y: 0), controlPoint2: CGPoint(x: 17.66, y: -0))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 4), controlPoint1: CGPoint(x: 20, y: 2.34), controlPoint2: CGPoint(x: 20, y: 2.34))
        bezierPath.addLine(to: CGPoint(x: 20, y: 4.69))
        bezierPath.addCurve(to: CGPoint(x: 21.18, y: 5.17), controlPoint1: CGPoint(x: 20.49, y: 4.86), controlPoint2: CGPoint(x: 20.49, y: 4.86))
        bezierPath.addLine(to: CGPoint(x: 21.66, y: 4.69))
        bezierPath.addCurve(to: CGPoint(x: 24.49, y: 3.51), controlPoint1: CGPoint(x: 22.83, y: 3.51), controlPoint2: CGPoint(x: 22.83, y: 3.51))
        bezierPath.addCurve(to: CGPoint(x: 27.31, y: 4.69), controlPoint1: CGPoint(x: 26.13, y: 3.51), controlPoint2: CGPoint(x: 26.13, y: 3.51))
        bezierPath.addCurve(to: CGPoint(x: 28.49, y: 7.51), controlPoint1: CGPoint(x: 28.49, y: 5.87), controlPoint2: CGPoint(x: 28.49, y: 5.86))
        bezierPath.addCurve(to: CGPoint(x: 27.31, y: 10.34), controlPoint1: CGPoint(x: 28.49, y: 9.17), controlPoint2: CGPoint(x: 28.49, y: 9.17))
        bezierPath.addLine(to: CGPoint(x: 26.83, y: 10.82))
        bezierPath.addCurve(to: CGPoint(x: 27.31, y: 12), controlPoint1: CGPoint(x: 27.15, y: 11.51), controlPoint2: CGPoint(x: 27.15, y: 11.51))
        bezierPath.addLine(to: CGPoint(x: 28, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 30.83, y: 13.17), controlPoint1: CGPoint(x: 29.66, y: 12), controlPoint2: CGPoint(x: 29.66, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 16), controlPoint1: CGPoint(x: 32, y: 14.34), controlPoint2: CGPoint(x: 32, y: 14.34))
        bezierPath.addCurve(to: CGPoint(x: 30.83, y: 18.83), controlPoint1: CGPoint(x: 32, y: 17.66), controlPoint2: CGPoint(x: 32, y: 17.66))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 20), controlPoint1: CGPoint(x: 29.66, y: 20), controlPoint2: CGPoint(x: 29.66, y: 20))
        bezierPath.addLine(to: CGPoint(x: 27.31, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 26.83, y: 21.18), controlPoint1: CGPoint(x: 27.14, y: 20.49), controlPoint2: CGPoint(x: 27.14, y: 20.49))
        bezierPath.addLine(to: CGPoint(x: 27.31, y: 21.66))
        bezierPath.addCurve(to: CGPoint(x: 28.49, y: 24.49), controlPoint1: CGPoint(x: 28.49, y: 22.83), controlPoint2: CGPoint(x: 28.49, y: 22.83))
        bezierPath.addCurve(to: CGPoint(x: 27.31, y: 27.31), controlPoint1: CGPoint(x: 28.49, y: 26.14), controlPoint2: CGPoint(x: 28.49, y: 26.13))
        bezierPath.addCurve(to: CGPoint(x: 24.49, y: 28.49), controlPoint1: CGPoint(x: 26.13, y: 28.49), controlPoint2: CGPoint(x: 26.13, y: 28.49))
        bezierPath.addCurve(to: CGPoint(x: 21.66, y: 27.31), controlPoint1: CGPoint(x: 22.83, y: 28.49), controlPoint2: CGPoint(x: 22.83, y: 28.49))
        bezierPath.addLine(to: CGPoint(x: 21.18, y: 26.83))
        bezierPath.addCurve(to: CGPoint(x: 20, y: 27.31), controlPoint1: CGPoint(x: 20.49, y: 27.15), controlPoint2: CGPoint(x: 20.49, y: 27.15))
        bezierPath.addLine(to: CGPoint(x: 20, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 18.83, y: 30.83), controlPoint1: CGPoint(x: 20, y: 29.66), controlPoint2: CGPoint(x: 20, y: 29.66))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 32), controlPoint1: CGPoint(x: 17.66, y: 32), controlPoint2: CGPoint(x: 17.66, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 13.17, y: 30.83), controlPoint1: CGPoint(x: 14.34, y: 32), controlPoint2: CGPoint(x: 14.34, y: 32))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 28), controlPoint1: CGPoint(x: 12, y: 29.66), controlPoint2: CGPoint(x: 12, y: 29.66))
        bezierPath.addLine(to: CGPoint(x: 12, y: 27.31))
        bezierPath.addCurve(to: CGPoint(x: 10.82, y: 26.83), controlPoint1: CGPoint(x: 11.51, y: 27.14), controlPoint2: CGPoint(x: 11.51, y: 27.14))
        bezierPath.addLine(to: CGPoint(x: 10.34, y: 27.31))
        bezierPath.addCurve(to: CGPoint(x: 7.52, y: 28.49), controlPoint1: CGPoint(x: 9.17, y: 28.49), controlPoint2: CGPoint(x: 9.17, y: 28.49))
        bezierPath.addCurve(to: CGPoint(x: 4.69, y: 27.31), controlPoint1: CGPoint(x: 5.87, y: 28.49), controlPoint2: CGPoint(x: 5.87, y: 28.49))
        bezierPath.addCurve(to: CGPoint(x: 3.52, y: 24.49), controlPoint1: CGPoint(x: 3.52, y: 26.13), controlPoint2: CGPoint(x: 3.52, y: 26.14))
        bezierPath.addCurve(to: CGPoint(x: 4.69, y: 21.66), controlPoint1: CGPoint(x: 3.52, y: 22.82), controlPoint2: CGPoint(x: 3.52, y: 22.82))
        bezierPath.addLine(to: CGPoint(x: 5.17, y: 21.18))
        bezierPath.addCurve(to: CGPoint(x: 4.69, y: 20), controlPoint1: CGPoint(x: 4.85, y: 20.49), controlPoint2: CGPoint(x: 4.85, y: 20.49))
        bezierPath.addLine(to: CGPoint(x: 4, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 1.17, y: 18.83), controlPoint1: CGPoint(x: 2.34, y: 20), controlPoint2: CGPoint(x: 2.34, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 16), controlPoint1: CGPoint(x: 0, y: 17.66), controlPoint2: CGPoint(x: 0, y: 17.66))
        bezierPath.addCurve(to: CGPoint(x: 1.17, y: 13.17), controlPoint1: CGPoint(x: 0, y: 14.34), controlPoint2: CGPoint(x: 0, y: 14.34))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 12), controlPoint1: CGPoint(x: 2.34, y: 12), controlPoint2: CGPoint(x: 2.34, y: 12))
        bezierPath.addLine(to: CGPoint(x: 4.69, y: 12))
        bezierPath.addCurve(to: CGPoint(x: 5.17, y: 10.82), controlPoint1: CGPoint(x: 4.86, y: 11.51), controlPoint2: CGPoint(x: 4.86, y: 11.51))
        bezierPath.addLine(to: CGPoint(x: 4.69, y: 10.34))
        bezierPath.addCurve(to: CGPoint(x: 3.52, y: 7.51), controlPoint1: CGPoint(x: 3.52, y: 9.18), controlPoint2: CGPoint(x: 3.52, y: 9.18))
        bezierPath.addCurve(to: CGPoint(x: 4.69, y: 4.69), controlPoint1: CGPoint(x: 3.52, y: 5.86), controlPoint2: CGPoint(x: 3.52, y: 5.87))
        bezierPath.addCurve(to: CGPoint(x: 7.52, y: 3.51), controlPoint1: CGPoint(x: 5.87, y: 3.51), controlPoint2: CGPoint(x: 5.87, y: 3.51))
        bezierPath.addCurve(to: CGPoint(x: 10.34, y: 4.69), controlPoint1: CGPoint(x: 9.17, y: 3.51), controlPoint2: CGPoint(x: 9.17, y: 3.51))
        bezierPath.addLine(to: CGPoint(x: 10.82, y: 5.17))
        bezierPath.addCurve(to: CGPoint(x: 12, y: 4.69), controlPoint1: CGPoint(x: 11.51, y: 4.85), controlPoint2: CGPoint(x: 11.51, y: 4.85))
        bezierPath.addLine(to: CGPoint(x: 12, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 13.17, y: 1.17), controlPoint1: CGPoint(x: 12, y: 2.34), controlPoint2: CGPoint(x: 12, y: 2.34))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 0), controlPoint1: CGPoint(x: 14.34, y: -0), controlPoint2: CGPoint(x: 14.34, y: 0))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 16, y: 2.67))
        bezierPath.addCurve(to: CGPoint(x: 15.06, y: 3.06), controlPoint1: CGPoint(x: 15.45, y: 2.67), controlPoint2: CGPoint(x: 15.45, y: 2.67))
        bezierPath.addCurve(to: CGPoint(x: 14.67, y: 4), controlPoint1: CGPoint(x: 14.67, y: 3.45), controlPoint2: CGPoint(x: 14.67, y: 3.45))
        bezierPath.addLine(to: CGPoint(x: 14.67, y: 6.76))
        bezierPath.addCurve(to: CGPoint(x: 10.41, y: 8.52), controlPoint1: CGPoint(x: 12.33, y: 7.09), controlPoint2: CGPoint(x: 12.33, y: 7.09))
        bezierPath.addLine(to: CGPoint(x: 8.46, y: 6.57))
        bezierPath.addCurve(to: CGPoint(x: 7.52, y: 6.18), controlPoint1: CGPoint(x: 8.06, y: 6.18), controlPoint2: CGPoint(x: 8.06, y: 6.18))
        bezierPath.addCurve(to: CGPoint(x: 6.58, y: 6.57), controlPoint1: CGPoint(x: 6.97, y: 6.18), controlPoint2: CGPoint(x: 6.97, y: 6.18))
        bezierPath.addCurve(to: CGPoint(x: 6.19, y: 7.51), controlPoint1: CGPoint(x: 6.19, y: 6.96), controlPoint2: CGPoint(x: 6.19, y: 6.96))
        bezierPath.addCurve(to: CGPoint(x: 6.57, y: 8.46), controlPoint1: CGPoint(x: 6.19, y: 8.07), controlPoint2: CGPoint(x: 6.19, y: 8.07))
        bezierPath.addLine(to: CGPoint(x: 8.52, y: 10.41))
        bezierPath.addCurve(to: CGPoint(x: 6.76, y: 14.67), controlPoint1: CGPoint(x: 7.09, y: 12.33), controlPoint2: CGPoint(x: 7.09, y: 12.33))
        bezierPath.addLine(to: CGPoint(x: 4, y: 14.67))
        bezierPath.addCurve(to: CGPoint(x: 3.06, y: 15.06), controlPoint1: CGPoint(x: 3.45, y: 14.67), controlPoint2: CGPoint(x: 3.45, y: 14.67))
        bezierPath.addCurve(to: CGPoint(x: 2.67, y: 16), controlPoint1: CGPoint(x: 2.67, y: 15.45), controlPoint2: CGPoint(x: 2.67, y: 15.45))
        bezierPath.addCurve(to: CGPoint(x: 3.06, y: 16.94), controlPoint1: CGPoint(x: 2.67, y: 16.55), controlPoint2: CGPoint(x: 2.67, y: 16.55))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 17.34), controlPoint1: CGPoint(x: 3.45, y: 17.34), controlPoint2: CGPoint(x: 3.45, y: 17.34))
        bezierPath.addLine(to: CGPoint(x: 6.76, y: 17.34))
        bezierPath.addCurve(to: CGPoint(x: 8.52, y: 21.59), controlPoint1: CGPoint(x: 7.09, y: 19.67), controlPoint2: CGPoint(x: 7.09, y: 19.67))
        bezierPath.addLine(to: CGPoint(x: 6.57, y: 23.54))
        bezierPath.addCurve(to: CGPoint(x: 6.19, y: 24.49), controlPoint1: CGPoint(x: 6.19, y: 23.93), controlPoint2: CGPoint(x: 6.19, y: 23.93))
        bezierPath.addCurve(to: CGPoint(x: 6.58, y: 25.43), controlPoint1: CGPoint(x: 6.19, y: 25.04), controlPoint2: CGPoint(x: 6.19, y: 25.04))
        bezierPath.addCurve(to: CGPoint(x: 7.52, y: 25.83), controlPoint1: CGPoint(x: 6.97, y: 25.82), controlPoint2: CGPoint(x: 6.97, y: 25.83))
        bezierPath.addCurve(to: CGPoint(x: 8.46, y: 25.43), controlPoint1: CGPoint(x: 8.06, y: 25.83), controlPoint2: CGPoint(x: 8.06, y: 25.83))
        bezierPath.addLine(to: CGPoint(x: 10.4, y: 23.48))
        bezierPath.addCurve(to: CGPoint(x: 14.66, y: 25.24), controlPoint1: CGPoint(x: 12.33, y: 24.91), controlPoint2: CGPoint(x: 12.33, y: 24.91))
        bezierPath.addLine(to: CGPoint(x: 14.66, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 15.06, y: 28.94), controlPoint1: CGPoint(x: 14.66, y: 28.55), controlPoint2: CGPoint(x: 14.66, y: 28.55))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 29.34), controlPoint1: CGPoint(x: 15.45, y: 29.34), controlPoint2: CGPoint(x: 15.45, y: 29.34))
        bezierPath.addCurve(to: CGPoint(x: 16.94, y: 28.94), controlPoint1: CGPoint(x: 16.55, y: 29.34), controlPoint2: CGPoint(x: 16.55, y: 29.34))
        bezierPath.addCurve(to: CGPoint(x: 17.33, y: 28), controlPoint1: CGPoint(x: 17.33, y: 28.55), controlPoint2: CGPoint(x: 17.33, y: 28.55))
        bezierPath.addLine(to: CGPoint(x: 17.33, y: 25.24))
        bezierPath.addCurve(to: CGPoint(x: 21.59, y: 23.48), controlPoint1: CGPoint(x: 19.67, y: 24.91), controlPoint2: CGPoint(x: 19.67, y: 24.91))
        bezierPath.addLine(to: CGPoint(x: 23.54, y: 25.43))
        bezierPath.addCurve(to: CGPoint(x: 24.49, y: 25.83), controlPoint1: CGPoint(x: 23.94, y: 25.83), controlPoint2: CGPoint(x: 23.94, y: 25.83))
        bezierPath.addCurve(to: CGPoint(x: 25.43, y: 25.43), controlPoint1: CGPoint(x: 25.04, y: 25.83), controlPoint2: CGPoint(x: 25.04, y: 25.83))
        bezierPath.addCurve(to: CGPoint(x: 25.82, y: 24.49), controlPoint1: CGPoint(x: 25.82, y: 25.04), controlPoint2: CGPoint(x: 25.82, y: 25.04))
        bezierPath.addCurve(to: CGPoint(x: 25.43, y: 23.54), controlPoint1: CGPoint(x: 25.82, y: 23.94), controlPoint2: CGPoint(x: 25.82, y: 23.94))
        bezierPath.addLine(to: CGPoint(x: 23.48, y: 21.59))
        bezierPath.addCurve(to: CGPoint(x: 25.24, y: 17.34), controlPoint1: CGPoint(x: 24.91, y: 19.67), controlPoint2: CGPoint(x: 24.91, y: 19.67))
        bezierPath.addLine(to: CGPoint(x: 28, y: 17.34))
        bezierPath.addCurve(to: CGPoint(x: 28.94, y: 16.94), controlPoint1: CGPoint(x: 28.55, y: 17.34), controlPoint2: CGPoint(x: 28.55, y: 17.34))
        bezierPath.addCurve(to: CGPoint(x: 29.33, y: 16), controlPoint1: CGPoint(x: 29.33, y: 16.55), controlPoint2: CGPoint(x: 29.33, y: 16.55))
        bezierPath.addCurve(to: CGPoint(x: 28.94, y: 15.06), controlPoint1: CGPoint(x: 29.33, y: 15.45), controlPoint2: CGPoint(x: 29.33, y: 15.45))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 14.67), controlPoint1: CGPoint(x: 28.55, y: 14.67), controlPoint2: CGPoint(x: 28.55, y: 14.67))
        bezierPath.addLine(to: CGPoint(x: 25.24, y: 14.67))
        bezierPath.addCurve(to: CGPoint(x: 23.48, y: 10.41), controlPoint1: CGPoint(x: 24.91, y: 12.33), controlPoint2: CGPoint(x: 24.91, y: 12.33))
        bezierPath.addLine(to: CGPoint(x: 25.43, y: 8.46))
        bezierPath.addCurve(to: CGPoint(x: 25.82, y: 7.51), controlPoint1: CGPoint(x: 25.82, y: 8.06), controlPoint2: CGPoint(x: 25.82, y: 8.06))
        bezierPath.addCurve(to: CGPoint(x: 25.43, y: 6.57), controlPoint1: CGPoint(x: 25.82, y: 6.96), controlPoint2: CGPoint(x: 25.82, y: 6.96))
        bezierPath.addCurve(to: CGPoint(x: 24.49, y: 6.18), controlPoint1: CGPoint(x: 25.04, y: 6.18), controlPoint2: CGPoint(x: 25.04, y: 6.18))
        bezierPath.addCurve(to: CGPoint(x: 23.54, y: 6.57), controlPoint1: CGPoint(x: 23.94, y: 6.18), controlPoint2: CGPoint(x: 23.94, y: 6.18))
        bezierPath.addLine(to: CGPoint(x: 21.59, y: 8.52))
        bezierPath.addCurve(to: CGPoint(x: 17.33, y: 6.76), controlPoint1: CGPoint(x: 19.67, y: 7.09), controlPoint2: CGPoint(x: 19.67, y: 7.09))
        bezierPath.addLine(to: CGPoint(x: 17.33, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 16.94, y: 3.06), controlPoint1: CGPoint(x: 17.33, y: 3.45), controlPoint2: CGPoint(x: 17.33, y: 3.45))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 2.67), controlPoint1: CGPoint(x: 16.55, y: 2.67), controlPoint2: CGPoint(x: 16.55, y: 2.67))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 16, y: 10.67))
        bezierPath.addCurve(to: CGPoint(x: 19.77, y: 12.23), controlPoint1: CGPoint(x: 18.21, y: 10.67), controlPoint2: CGPoint(x: 18.21, y: 10.67))
        bezierPath.addCurve(to: CGPoint(x: 21.33, y: 16), controlPoint1: CGPoint(x: 21.33, y: 13.79), controlPoint2: CGPoint(x: 21.33, y: 13.79))
        bezierPath.addCurve(to: CGPoint(x: 19.77, y: 19.77), controlPoint1: CGPoint(x: 21.33, y: 18.21), controlPoint2: CGPoint(x: 21.33, y: 18.21))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 21.34), controlPoint1: CGPoint(x: 18.21, y: 21.34), controlPoint2: CGPoint(x: 18.21, y: 21.34))
        bezierPath.addCurve(to: CGPoint(x: 12.23, y: 19.77), controlPoint1: CGPoint(x: 13.79, y: 21.34), controlPoint2: CGPoint(x: 13.79, y: 21.34))
        bezierPath.addCurve(to: CGPoint(x: 10.67, y: 16), controlPoint1: CGPoint(x: 10.67, y: 18.21), controlPoint2: CGPoint(x: 10.67, y: 18.21))
        bezierPath.addCurve(to: CGPoint(x: 12.23, y: 12.23), controlPoint1: CGPoint(x: 10.67, y: 13.79), controlPoint2: CGPoint(x: 10.67, y: 13.79))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 10.67), controlPoint1: CGPoint(x: 13.79, y: 10.67), controlPoint2: CGPoint(x: 13.79, y: 10.67))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 16, y: 13.33))
        bezierPath.addCurve(to: CGPoint(x: 14.12, y: 14.11), controlPoint1: CGPoint(x: 14.9, y: 13.33), controlPoint2: CGPoint(x: 14.9, y: 13.33))
        bezierPath.addCurve(to: CGPoint(x: 13.33, y: 16), controlPoint1: CGPoint(x: 13.33, y: 14.9), controlPoint2: CGPoint(x: 13.33, y: 14.89))
        bezierPath.addCurve(to: CGPoint(x: 14.12, y: 17.88), controlPoint1: CGPoint(x: 13.33, y: 17.1), controlPoint2: CGPoint(x: 13.33, y: 17.1))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 18.67), controlPoint1: CGPoint(x: 14.9, y: 18.66), controlPoint2: CGPoint(x: 14.9, y: 18.67))
        bezierPath.addCurve(to: CGPoint(x: 17.89, y: 17.88), controlPoint1: CGPoint(x: 17.1, y: 18.67), controlPoint2: CGPoint(x: 17.1, y: 18.66))
        bezierPath.addCurve(to: CGPoint(x: 18.67, y: 16), controlPoint1: CGPoint(x: 18.67, y: 17.1), controlPoint2: CGPoint(x: 18.67, y: 17.1))
        bezierPath.addCurve(to: CGPoint(x: 17.89, y: 14.11), controlPoint1: CGPoint(x: 18.67, y: 14.89), controlPoint2: CGPoint(x: 18.67, y: 14.9))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 13.33), controlPoint1: CGPoint(x: 17.1, y: 13.33), controlPoint2: CGPoint(x: 17.1, y: 13.33))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawFolder(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 10.6, y: 7.11))
        bezierPath.addLine(to: CGPoint(x: 12.86, y: 9.36))
        bezierPath.addCurve(to: CGPoint(x: 16, y: 10.67), controlPoint1: CGPoint(x: 13.7, y: 10.2), controlPoint2: CGPoint(x: 14.81, y: 10.67))
        bezierPath.addLine(to: CGPoint(x: 26.67, y: 10.67))
        bezierPath.addLine(to: CGPoint(x: 26.67, y: 24.89))
        bezierPath.addLine(to: CGPoint(x: 5.33, y: 24.89))
        bezierPath.addLine(to: CGPoint(x: 5.33, y: 7.11))
        bezierPath.addLine(to: CGPoint(x: 10.6, y: 7.11))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 11.71, y: 3.56))
        bezierPath.addLine(to: CGPoint(x: 3.55, y: 3.56))
        bezierPath.addCurve(to: CGPoint(x: 1.78, y: 5.33), controlPoint1: CGPoint(x: 2.57, y: 3.56), controlPoint2: CGPoint(x: 1.78, y: 4.35))
        bezierPath.addLine(to: CGPoint(x: 1.78, y: 26.67))
        bezierPath.addCurve(to: CGPoint(x: 3.55, y: 28.44), controlPoint1: CGPoint(x: 1.78, y: 27.65), controlPoint2: CGPoint(x: 2.57, y: 28.44))
        bezierPath.addLine(to: CGPoint(x: 28.44, y: 28.44))
        bezierPath.addCurve(to: CGPoint(x: 30.22, y: 26.67), controlPoint1: CGPoint(x: 29.43, y: 28.44), controlPoint2: CGPoint(x: 30.22, y: 27.65))
        bezierPath.addLine(to: CGPoint(x: 30.22, y: 8.89))
        bezierPath.addCurve(to: CGPoint(x: 28.44, y: 7.11), controlPoint1: CGPoint(x: 30.22, y: 7.91), controlPoint2: CGPoint(x: 29.43, y: 7.11))
        bezierPath.addLine(to: CGPoint(x: 16, y: 7.11))
        bezierPath.addCurve(to: CGPoint(x: 15.37, y: 6.85), controlPoint1: CGPoint(x: 15.76, y: 7.11), controlPoint2: CGPoint(x: 15.54, y: 7.02))
        bezierPath.addLine(to: CGPoint(x: 12.34, y: 3.82))
        bezierPath.addCurve(to: CGPoint(x: 11.71, y: 3.56), controlPoint1: CGPoint(x: 12.17, y: 3.65), controlPoint2: CGPoint(x: 11.94, y: 3.56))
        bezierPath.addLine(to: CGPoint(x: 11.71, y: 3.56))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawSpeechbubble(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 5.33, y: 1.33))
        bezierPath.addLine(to: CGPoint(x: 26.67, y: 1.33))
        bezierPath.addCurve(to: CGPoint(x: 29.49, y: 2.5), controlPoint1: CGPoint(x: 28.32, y: 1.33), controlPoint2: CGPoint(x: 28.32, y: 1.33))
        bezierPath.addCurve(to: CGPoint(x: 30.67, y: 5.33), controlPoint1: CGPoint(x: 30.67, y: 3.68), controlPoint2: CGPoint(x: 30.67, y: 3.68))
        bezierPath.addLine(to: CGPoint(x: 30.67, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 29.49, y: 22.83), controlPoint1: CGPoint(x: 30.67, y: 21.66), controlPoint2: CGPoint(x: 30.67, y: 21.66))
        bezierPath.addCurve(to: CGPoint(x: 26.67, y: 24), controlPoint1: CGPoint(x: 28.32, y: 24), controlPoint2: CGPoint(x: 28.32, y: 24))
        bezierPath.addLine(to: CGPoint(x: 16, y: 24))
        bezierPath.addLine(to: CGPoint(x: 6.67, y: 30.67))
        bezierPath.addLine(to: CGPoint(x: 6.67, y: 24))
        bezierPath.addLine(to: CGPoint(x: 5.33, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 2.5, y: 22.83), controlPoint1: CGPoint(x: 3.68, y: 24), controlPoint2: CGPoint(x: 3.68, y: 24))
        bezierPath.addCurve(to: CGPoint(x: 1.33, y: 20), controlPoint1: CGPoint(x: 1.33, y: 21.66), controlPoint2: CGPoint(x: 1.33, y: 21.66))
        bezierPath.addLine(to: CGPoint(x: 1.33, y: 5.33))
        bezierPath.addCurve(to: CGPoint(x: 2.5, y: 2.5), controlPoint1: CGPoint(x: 1.33, y: 3.68), controlPoint2: CGPoint(x: 1.33, y: 3.68))
        bezierPath.addCurve(to: CGPoint(x: 5.33, y: 1.33), controlPoint1: CGPoint(x: 3.68, y: 1.33), controlPoint2: CGPoint(x: 3.68, y: 1.33))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 26.67, y: 4))
        bezierPath.addLine(to: CGPoint(x: 5.33, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 4.39, y: 4.39), controlPoint1: CGPoint(x: 4.78, y: 4), controlPoint2: CGPoint(x: 4.78, y: 4))
        bezierPath.addCurve(to: CGPoint(x: 4, y: 5.33), controlPoint1: CGPoint(x: 4, y: 4.78), controlPoint2: CGPoint(x: 4, y: 4.78))
        bezierPath.addLine(to: CGPoint(x: 4, y: 20))
        bezierPath.addCurve(to: CGPoint(x: 4.39, y: 20.94), controlPoint1: CGPoint(x: 4, y: 20.55), controlPoint2: CGPoint(x: 4, y: 20.55))
        bezierPath.addCurve(to: CGPoint(x: 5.33, y: 21.34), controlPoint1: CGPoint(x: 4.78, y: 21.34), controlPoint2: CGPoint(x: 4.78, y: 21.34))
        bezierPath.addLine(to: CGPoint(x: 9.33, y: 21.34))
        bezierPath.addLine(to: CGPoint(x: 9.33, y: 25.49))
        bezierPath.addLine(to: CGPoint(x: 15.15, y: 21.34))
        bezierPath.addLine(to: CGPoint(x: 26.67, y: 21.34))
        bezierPath.addCurve(to: CGPoint(x: 27.61, y: 20.94), controlPoint1: CGPoint(x: 27.22, y: 21.34), controlPoint2: CGPoint(x: 27.22, y: 21.34))
        bezierPath.addCurve(to: CGPoint(x: 28, y: 20), controlPoint1: CGPoint(x: 28, y: 20.55), controlPoint2: CGPoint(x: 28, y: 20.55))
        bezierPath.addLine(to: CGPoint(x: 28, y: 5.33))
        bezierPath.addCurve(to: CGPoint(x: 27.61, y: 4.39), controlPoint1: CGPoint(x: 28, y: 4.78), controlPoint2: CGPoint(x: 28, y: 4.78))
        bezierPath.addCurve(to: CGPoint(x: 26.67, y: 4), controlPoint1: CGPoint(x: 27.22, y: 4), controlPoint2: CGPoint(x: 27.22, y: 4))
        bezierPath.addLine(to: CGPoint(x: 26.67, y: 4))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawTasks(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 32, height: 32), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 32, height: 32), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 32, y: resizedFrame.height / 32)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 18.29, y: 25.14))
        bezierPath.addLine(to: CGPoint(x: 29.72, y: 25.14))
        bezierPath.addLine(to: CGPoint(x: 29.72, y: 22.86))
        bezierPath.addLine(to: CGPoint(x: 18.29, y: 22.86))
        bezierPath.addLine(to: CGPoint(x: 18.29, y: 25.14))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 11.43, y: 16))
        bezierPath.addLine(to: CGPoint(x: 29.72, y: 16))
        bezierPath.addLine(to: CGPoint(x: 29.72, y: 13.71))
        bezierPath.addLine(to: CGPoint(x: 11.43, y: 13.71))
        bezierPath.addLine(to: CGPoint(x: 11.43, y: 16))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 22.86, y: 6.86))
        bezierPath.addLine(to: CGPoint(x: 29.71, y: 6.86))
        bezierPath.addLine(to: CGPoint(x: 29.71, y: 4.57))
        bezierPath.addLine(to: CGPoint(x: 22.86, y: 4.57))
        bezierPath.addLine(to: CGPoint(x: 22.86, y: 6.86))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 32, y: 21.71))
        bezierPath.addLine(to: CGPoint(x: 32, y: 26.28))
        bezierPath.addCurve(to: CGPoint(x: 30.86, y: 27.43), controlPoint1: CGPoint(x: 32, y: 26.91), controlPoint2: CGPoint(x: 31.48, y: 27.43))
        bezierPath.addLine(to: CGPoint(x: 1.14, y: 27.43))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 26.28), controlPoint1: CGPoint(x: 0.52, y: 27.43), controlPoint2: CGPoint(x: 0, y: 26.91))
        bezierPath.addLine(to: CGPoint(x: 0, y: 21.71))
        bezierPath.addCurve(to: CGPoint(x: 1.14, y: 20.57), controlPoint1: CGPoint(x: 0, y: 21.09), controlPoint2: CGPoint(x: 0.52, y: 20.57))
        bezierPath.addLine(to: CGPoint(x: 30.86, y: 20.57))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 21.71), controlPoint1: CGPoint(x: 31.48, y: 20.57), controlPoint2: CGPoint(x: 32, y: 21.09))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 32, y: 12.57))
        bezierPath.addLine(to: CGPoint(x: 32, y: 17.14))
        bezierPath.addCurve(to: CGPoint(x: 30.86, y: 18.28), controlPoint1: CGPoint(x: 32, y: 17.77), controlPoint2: CGPoint(x: 31.48, y: 18.28))
        bezierPath.addLine(to: CGPoint(x: 1.14, y: 18.28))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 17.14), controlPoint1: CGPoint(x: 0.52, y: 18.28), controlPoint2: CGPoint(x: 0, y: 17.77))
        bezierPath.addLine(to: CGPoint(x: 0, y: 12.57))
        bezierPath.addCurve(to: CGPoint(x: 1.14, y: 11.43), controlPoint1: CGPoint(x: 0, y: 11.95), controlPoint2: CGPoint(x: 0.52, y: 11.43))
        bezierPath.addLine(to: CGPoint(x: 30.86, y: 11.43))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 12.57), controlPoint1: CGPoint(x: 31.48, y: 11.43), controlPoint2: CGPoint(x: 32, y: 11.95))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 32, y: 3.43))
        bezierPath.addLine(to: CGPoint(x: 32, y: 8))
        bezierPath.addCurve(to: CGPoint(x: 30.86, y: 9.14), controlPoint1: CGPoint(x: 32, y: 8.62), controlPoint2: CGPoint(x: 31.48, y: 9.14))
        bezierPath.addLine(to: CGPoint(x: 1.14, y: 9.14))
        bezierPath.addCurve(to: CGPoint(x: 0, y: 8), controlPoint1: CGPoint(x: 0.52, y: 9.14), controlPoint2: CGPoint(x: 0, y: 8.62))
        bezierPath.addLine(to: CGPoint(x: 0, y: 3.43))
        bezierPath.addCurve(to: CGPoint(x: 1.14, y: 2.29), controlPoint1: CGPoint(x: 0, y: 2.8), controlPoint2: CGPoint(x: 0.52, y: 2.29))
        bezierPath.addLine(to: CGPoint(x: 30.86, y: 2.29))
        bezierPath.addCurve(to: CGPoint(x: 32, y: 3.43), controlPoint1: CGPoint(x: 31.48, y: 2.29), controlPoint2: CGPoint(x: 32, y: 2.8))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawTasks_25(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.29, y: 23.64))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 23.64))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 21.86))
        bezierPath.addLine(to: CGPoint(x: 16.29, y: 21.86))
        bezierPath.addLine(to: CGPoint(x: 16.29, y: 23.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10.93, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 14.71))
        bezierPath.addLine(to: CGPoint(x: 10.93, y: 14.71))
        bezierPath.addLine(to: CGPoint(x: 10.93, y: 16.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19.86, y: 9.36))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 9.36))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 7.57))
        bezierPath.addLine(to: CGPoint(x: 19.86, y: 7.57))
        bezierPath.addLine(to: CGPoint(x: 19.86, y: 9.36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 27, y: 20.96))
        bezierPath.addLine(to: CGPoint(x: 27, y: 24.53))
        bezierPath.addCurve(to: CGPoint(x: 26.11, y: 25.43), controlPoint1: CGPoint(x: 27, y: 25.02), controlPoint2: CGPoint(x: 26.59, y: 25.43))
        bezierPath.addLine(to: CGPoint(x: 2.89, y: 25.43))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 24.53), controlPoint1: CGPoint(x: 2.41, y: 25.43), controlPoint2: CGPoint(x: 2, y: 25.02))
        bezierPath.addLine(to: CGPoint(x: 2, y: 20.96))
        bezierPath.addCurve(to: CGPoint(x: 2.89, y: 20.07), controlPoint1: CGPoint(x: 2, y: 20.48), controlPoint2: CGPoint(x: 2.41, y: 20.07))
        bezierPath.addLine(to: CGPoint(x: 26.11, y: 20.07))
        bezierPath.addCurve(to: CGPoint(x: 27, y: 20.96), controlPoint1: CGPoint(x: 26.59, y: 20.07), controlPoint2: CGPoint(x: 27, y: 20.48))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 27, y: 13.82))
        bezierPath.addLine(to: CGPoint(x: 27, y: 17.39))
        bezierPath.addCurve(to: CGPoint(x: 26.11, y: 18.28), controlPoint1: CGPoint(x: 27, y: 17.88), controlPoint2: CGPoint(x: 26.59, y: 18.28))
        bezierPath.addLine(to: CGPoint(x: 2.89, y: 18.28))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 17.39), controlPoint1: CGPoint(x: 2.41, y: 18.28), controlPoint2: CGPoint(x: 2, y: 17.88))
        bezierPath.addLine(to: CGPoint(x: 2, y: 13.82))
        bezierPath.addCurve(to: CGPoint(x: 2.89, y: 12.93), controlPoint1: CGPoint(x: 2, y: 13.33), controlPoint2: CGPoint(x: 2.41, y: 12.93))
        bezierPath.addLine(to: CGPoint(x: 26.11, y: 12.93))
        bezierPath.addCurve(to: CGPoint(x: 27, y: 13.82), controlPoint1: CGPoint(x: 26.59, y: 12.93), controlPoint2: CGPoint(x: 27, y: 13.33))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 27, y: 6.68))
        bezierPath.addLine(to: CGPoint(x: 27, y: 10.25))
        bezierPath.addCurve(to: CGPoint(x: 26.11, y: 11.14), controlPoint1: CGPoint(x: 27, y: 10.74), controlPoint2: CGPoint(x: 26.59, y: 11.14))
        bezierPath.addLine(to: CGPoint(x: 2.89, y: 11.14))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10.25), controlPoint1: CGPoint(x: 2.41, y: 11.14), controlPoint2: CGPoint(x: 2, y: 10.74))
        bezierPath.addLine(to: CGPoint(x: 2, y: 6.68))
        bezierPath.addCurve(to: CGPoint(x: 2.89, y: 5.79), controlPoint1: CGPoint(x: 2, y: 6.19), controlPoint2: CGPoint(x: 2.41, y: 5.79))
        bezierPath.addLine(to: CGPoint(x: 26.11, y: 5.79))
        bezierPath.addCurve(to: CGPoint(x: 27, y: 6.68), controlPoint1: CGPoint(x: 26.59, y: 5.79), controlPoint2: CGPoint(x: 27, y: 6.19))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawSpeech_bubble_25(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.17, y: 4.04))
        bezierPath.addLine(to: CGPoint(x: 22.83, y: 4.04))
        bezierPath.addCurve(to: CGPoint(x: 25.04, y: 4.96), controlPoint1: CGPoint(x: 24.13, y: 4.04), controlPoint2: CGPoint(x: 24.13, y: 4.04))
        bezierPath.addCurve(to: CGPoint(x: 25.96, y: 7.17), controlPoint1: CGPoint(x: 25.96, y: 5.87), controlPoint2: CGPoint(x: 25.96, y: 5.87))
        bezierPath.addLine(to: CGPoint(x: 25.96, y: 18.62))
        bezierPath.addCurve(to: CGPoint(x: 25.04, y: 20.83), controlPoint1: CGPoint(x: 25.96, y: 19.92), controlPoint2: CGPoint(x: 25.96, y: 19.92))
        bezierPath.addCurve(to: CGPoint(x: 22.83, y: 21.75), controlPoint1: CGPoint(x: 24.13, y: 21.75), controlPoint2: CGPoint(x: 24.13, y: 21.75))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 21.75))
        bezierPath.addLine(to: CGPoint(x: 7.21, y: 26.96))
        bezierPath.addLine(to: CGPoint(x: 7.21, y: 21.75))
        bezierPath.addLine(to: CGPoint(x: 6.17, y: 21.75))
        bezierPath.addCurve(to: CGPoint(x: 3.96, y: 20.83), controlPoint1: CGPoint(x: 4.87, y: 21.75), controlPoint2: CGPoint(x: 4.87, y: 21.75))
        bezierPath.addCurve(to: CGPoint(x: 3.04, y: 18.62), controlPoint1: CGPoint(x: 3.04, y: 19.92), controlPoint2: CGPoint(x: 3.04, y: 19.92))
        bezierPath.addLine(to: CGPoint(x: 3.04, y: 7.17))
        bezierPath.addCurve(to: CGPoint(x: 3.96, y: 4.96), controlPoint1: CGPoint(x: 3.04, y: 5.87), controlPoint2: CGPoint(x: 3.04, y: 5.87))
        bezierPath.addCurve(to: CGPoint(x: 6.17, y: 4.04), controlPoint1: CGPoint(x: 4.87, y: 4.04), controlPoint2: CGPoint(x: 4.87, y: 4.04))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 22.83, y: 6.12))
        bezierPath.addLine(to: CGPoint(x: 6.17, y: 6.12))
        bezierPath.addCurve(to: CGPoint(x: 5.43, y: 6.43), controlPoint1: CGPoint(x: 5.73, y: 6.12), controlPoint2: CGPoint(x: 5.73, y: 6.13))
        bezierPath.addCurve(to: CGPoint(x: 5.12, y: 7.17), controlPoint1: CGPoint(x: 5.12, y: 6.74), controlPoint2: CGPoint(x: 5.12, y: 6.73))
        bezierPath.addLine(to: CGPoint(x: 5.12, y: 18.62))
        bezierPath.addCurve(to: CGPoint(x: 5.43, y: 19.36), controlPoint1: CGPoint(x: 5.12, y: 19.05), controlPoint2: CGPoint(x: 5.12, y: 19.05))
        bezierPath.addCurve(to: CGPoint(x: 6.17, y: 19.66), controlPoint1: CGPoint(x: 5.73, y: 19.66), controlPoint2: CGPoint(x: 5.73, y: 19.66))
        bezierPath.addLine(to: CGPoint(x: 9.29, y: 19.66))
        bezierPath.addLine(to: CGPoint(x: 9.29, y: 22.91))
        bezierPath.addLine(to: CGPoint(x: 13.83, y: 19.66))
        bezierPath.addLine(to: CGPoint(x: 22.83, y: 19.66))
        bezierPath.addCurve(to: CGPoint(x: 23.57, y: 19.36), controlPoint1: CGPoint(x: 23.26, y: 19.66), controlPoint2: CGPoint(x: 23.26, y: 19.66))
        bezierPath.addCurve(to: CGPoint(x: 23.87, y: 18.62), controlPoint1: CGPoint(x: 23.87, y: 19.05), controlPoint2: CGPoint(x: 23.87, y: 19.05))
        bezierPath.addLine(to: CGPoint(x: 23.87, y: 7.17))
        bezierPath.addCurve(to: CGPoint(x: 23.57, y: 6.43), controlPoint1: CGPoint(x: 23.87, y: 6.73), controlPoint2: CGPoint(x: 23.87, y: 6.74))
        bezierPath.addCurve(to: CGPoint(x: 22.83, y: 6.12), controlPoint1: CGPoint(x: 23.26, y: 6.13), controlPoint2: CGPoint(x: 23.26, y: 6.12))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawSettings_25(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Color Declarations
        let fillColor = UIColor(red: 0.000, green: 0.000, blue: 0.000, alpha: 1.000)

        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14.5, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 16.71, y: 3.92), controlPoint1: CGPoint(x: 15.79, y: 3), controlPoint2: CGPoint(x: 15.79, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 17.63, y: 6.12), controlPoint1: CGPoint(x: 17.62, y: 4.83), controlPoint2: CGPoint(x: 17.62, y: 4.83))
        bezierPath.addLine(to: CGPoint(x: 17.63, y: 6.66))
        bezierPath.addCurve(to: CGPoint(x: 18.55, y: 7.04), controlPoint1: CGPoint(x: 18.01, y: 6.79), controlPoint2: CGPoint(x: 18.01, y: 6.79))
        bezierPath.addLine(to: CGPoint(x: 18.92, y: 6.66))
        bezierPath.addCurve(to: CGPoint(x: 21.13, y: 5.74), controlPoint1: CGPoint(x: 19.84, y: 5.74), controlPoint2: CGPoint(x: 19.84, y: 5.74))
        bezierPath.addCurve(to: CGPoint(x: 23.34, y: 6.66), controlPoint1: CGPoint(x: 22.42, y: 5.74), controlPoint2: CGPoint(x: 22.42, y: 5.74))
        bezierPath.addCurve(to: CGPoint(x: 24.26, y: 8.87), controlPoint1: CGPoint(x: 24.26, y: 7.58), controlPoint2: CGPoint(x: 24.26, y: 7.58))
        bezierPath.addCurve(to: CGPoint(x: 23.34, y: 11.08), controlPoint1: CGPoint(x: 24.26, y: 10.16), controlPoint2: CGPoint(x: 24.26, y: 10.16))
        bezierPath.addLine(to: CGPoint(x: 22.96, y: 11.45))
        bezierPath.addCurve(to: CGPoint(x: 23.34, y: 12.38), controlPoint1: CGPoint(x: 23.21, y: 11.99), controlPoint2: CGPoint(x: 23.21, y: 11.99))
        bezierPath.addLine(to: CGPoint(x: 23.88, y: 12.38))
        bezierPath.addCurve(to: CGPoint(x: 26.08, y: 13.29), controlPoint1: CGPoint(x: 25.17, y: 12.38), controlPoint2: CGPoint(x: 25.17, y: 12.37))
        bezierPath.addCurve(to: CGPoint(x: 27, y: 15.5), controlPoint1: CGPoint(x: 27, y: 14.21), controlPoint2: CGPoint(x: 27, y: 14.21))
        bezierPath.addCurve(to: CGPoint(x: 26.08, y: 17.71), controlPoint1: CGPoint(x: 27, y: 16.79), controlPoint2: CGPoint(x: 27, y: 16.79))
        bezierPath.addCurve(to: CGPoint(x: 23.88, y: 18.62), controlPoint1: CGPoint(x: 25.17, y: 18.63), controlPoint2: CGPoint(x: 25.17, y: 18.62))
        bezierPath.addLine(to: CGPoint(x: 23.34, y: 18.62))
        bezierPath.addCurve(to: CGPoint(x: 22.96, y: 19.55), controlPoint1: CGPoint(x: 23.21, y: 19.01), controlPoint2: CGPoint(x: 23.21, y: 19.01))
        bezierPath.addLine(to: CGPoint(x: 23.34, y: 19.92))
        bezierPath.addCurve(to: CGPoint(x: 24.26, y: 22.13), controlPoint1: CGPoint(x: 24.26, y: 20.84), controlPoint2: CGPoint(x: 24.26, y: 20.84))
        bezierPath.addCurve(to: CGPoint(x: 23.34, y: 24.34), controlPoint1: CGPoint(x: 24.26, y: 23.42), controlPoint2: CGPoint(x: 24.26, y: 23.42))
        bezierPath.addCurve(to: CGPoint(x: 21.13, y: 25.26), controlPoint1: CGPoint(x: 22.42, y: 25.26), controlPoint2: CGPoint(x: 22.42, y: 25.26))
        bezierPath.addCurve(to: CGPoint(x: 18.92, y: 24.34), controlPoint1: CGPoint(x: 19.84, y: 25.26), controlPoint2: CGPoint(x: 19.84, y: 25.26))
        bezierPath.addLine(to: CGPoint(x: 18.55, y: 23.96))
        bezierPath.addCurve(to: CGPoint(x: 17.63, y: 24.34), controlPoint1: CGPoint(x: 18.01, y: 24.21), controlPoint2: CGPoint(x: 18.01, y: 24.21))
        bezierPath.addLine(to: CGPoint(x: 17.63, y: 24.88))
        bezierPath.addCurve(to: CGPoint(x: 16.71, y: 27.08), controlPoint1: CGPoint(x: 17.63, y: 26.17), controlPoint2: CGPoint(x: 17.63, y: 26.17))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 28), controlPoint1: CGPoint(x: 15.79, y: 28), controlPoint2: CGPoint(x: 15.79, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 12.29, y: 27.08), controlPoint1: CGPoint(x: 13.21, y: 28), controlPoint2: CGPoint(x: 13.21, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 11.38, y: 24.88), controlPoint1: CGPoint(x: 11.38, y: 26.17), controlPoint2: CGPoint(x: 11.38, y: 26.17))
        bezierPath.addLine(to: CGPoint(x: 11.38, y: 24.34))
        bezierPath.addCurve(to: CGPoint(x: 10.46, y: 23.96), controlPoint1: CGPoint(x: 10.99, y: 24.21), controlPoint2: CGPoint(x: 10.99, y: 24.21))
        bezierPath.addLine(to: CGPoint(x: 10.08, y: 24.34))
        bezierPath.addCurve(to: CGPoint(x: 7.88, y: 25.26), controlPoint1: CGPoint(x: 9.16, y: 25.26), controlPoint2: CGPoint(x: 9.16, y: 25.26))
        bezierPath.addCurve(to: CGPoint(x: 5.67, y: 24.34), controlPoint1: CGPoint(x: 6.58, y: 25.26), controlPoint2: CGPoint(x: 6.58, y: 25.26))
        bezierPath.addCurve(to: CGPoint(x: 4.75, y: 22.13), controlPoint1: CGPoint(x: 4.75, y: 23.42), controlPoint2: CGPoint(x: 4.75, y: 23.42))
        bezierPath.addCurve(to: CGPoint(x: 5.66, y: 19.92), controlPoint1: CGPoint(x: 4.75, y: 20.83), controlPoint2: CGPoint(x: 4.75, y: 20.83))
        bezierPath.addLine(to: CGPoint(x: 6.04, y: 19.55))
        bezierPath.addCurve(to: CGPoint(x: 5.66, y: 18.62), controlPoint1: CGPoint(x: 5.79, y: 19.01), controlPoint2: CGPoint(x: 5.79, y: 19.01))
        bezierPath.addLine(to: CGPoint(x: 5.13, y: 18.62))
        bezierPath.addCurve(to: CGPoint(x: 2.92, y: 17.71), controlPoint1: CGPoint(x: 3.83, y: 18.62), controlPoint2: CGPoint(x: 3.83, y: 18.63))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 15.5), controlPoint1: CGPoint(x: 2, y: 16.79), controlPoint2: CGPoint(x: 2, y: 16.79))
        bezierPath.addCurve(to: CGPoint(x: 2.92, y: 13.29), controlPoint1: CGPoint(x: 2, y: 14.21), controlPoint2: CGPoint(x: 2, y: 14.21))
        bezierPath.addCurve(to: CGPoint(x: 5.13, y: 12.38), controlPoint1: CGPoint(x: 3.83, y: 12.37), controlPoint2: CGPoint(x: 3.83, y: 12.38))
        bezierPath.addLine(to: CGPoint(x: 5.66, y: 12.38))
        bezierPath.addCurve(to: CGPoint(x: 6.04, y: 11.45), controlPoint1: CGPoint(x: 5.79, y: 11.99), controlPoint2: CGPoint(x: 5.79, y: 11.99))
        bezierPath.addLine(to: CGPoint(x: 5.66, y: 11.08))
        bezierPath.addCurve(to: CGPoint(x: 4.75, y: 8.87), controlPoint1: CGPoint(x: 4.75, y: 10.17), controlPoint2: CGPoint(x: 4.75, y: 10.17))
        bezierPath.addCurve(to: CGPoint(x: 5.67, y: 6.66), controlPoint1: CGPoint(x: 4.75, y: 7.58), controlPoint2: CGPoint(x: 4.75, y: 7.58))
        bezierPath.addCurve(to: CGPoint(x: 7.88, y: 5.74), controlPoint1: CGPoint(x: 6.58, y: 5.74), controlPoint2: CGPoint(x: 6.58, y: 5.74))
        bezierPath.addCurve(to: CGPoint(x: 10.08, y: 6.66), controlPoint1: CGPoint(x: 9.16, y: 5.74), controlPoint2: CGPoint(x: 9.16, y: 5.74))
        bezierPath.addLine(to: CGPoint(x: 10.46, y: 7.04))
        bezierPath.addCurve(to: CGPoint(x: 11.38, y: 6.66), controlPoint1: CGPoint(x: 10.99, y: 6.79), controlPoint2: CGPoint(x: 10.99, y: 6.79))
        bezierPath.addLine(to: CGPoint(x: 11.38, y: 6.12))
        bezierPath.addCurve(to: CGPoint(x: 12.29, y: 3.92), controlPoint1: CGPoint(x: 11.38, y: 4.83), controlPoint2: CGPoint(x: 11.38, y: 4.83))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 3), controlPoint1: CGPoint(x: 13.21, y: 3), controlPoint2: CGPoint(x: 13.21, y: 3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.5, y: 5.08))
        bezierPath.addCurve(to: CGPoint(x: 13.76, y: 5.39), controlPoint1: CGPoint(x: 14.07, y: 5.08), controlPoint2: CGPoint(x: 14.07, y: 5.08))
        bezierPath.addCurve(to: CGPoint(x: 13.46, y: 6.12), controlPoint1: CGPoint(x: 13.46, y: 5.69), controlPoint2: CGPoint(x: 13.46, y: 5.69))
        bezierPath.addLine(to: CGPoint(x: 13.46, y: 8.28))
        bezierPath.addCurve(to: CGPoint(x: 10.13, y: 9.66), controlPoint1: CGPoint(x: 11.64, y: 8.54), controlPoint2: CGPoint(x: 11.64, y: 8.54))
        bezierPath.addLine(to: CGPoint(x: 8.61, y: 8.13))
        bezierPath.addCurve(to: CGPoint(x: 7.88, y: 7.82), controlPoint1: CGPoint(x: 8.3, y: 7.82), controlPoint2: CGPoint(x: 8.3, y: 7.82))
        bezierPath.addCurve(to: CGPoint(x: 7.14, y: 8.13), controlPoint1: CGPoint(x: 7.45, y: 7.82), controlPoint2: CGPoint(x: 7.45, y: 7.82))
        bezierPath.addCurve(to: CGPoint(x: 6.84, y: 8.87), controlPoint1: CGPoint(x: 6.84, y: 8.43), controlPoint2: CGPoint(x: 6.84, y: 8.43))
        bezierPath.addCurve(to: CGPoint(x: 7.14, y: 9.61), controlPoint1: CGPoint(x: 6.84, y: 9.3), controlPoint2: CGPoint(x: 6.84, y: 9.3))
        bezierPath.addLine(to: CGPoint(x: 8.66, y: 11.13))
        bezierPath.addCurve(to: CGPoint(x: 7.28, y: 14.46), controlPoint1: CGPoint(x: 7.54, y: 12.63), controlPoint2: CGPoint(x: 7.54, y: 12.63))
        bezierPath.addLine(to: CGPoint(x: 5.13, y: 14.46))
        bezierPath.addCurve(to: CGPoint(x: 4.39, y: 14.76), controlPoint1: CGPoint(x: 4.7, y: 14.46), controlPoint2: CGPoint(x: 4.7, y: 14.46))
        bezierPath.addCurve(to: CGPoint(x: 4.09, y: 15.5), controlPoint1: CGPoint(x: 4.09, y: 15.07), controlPoint2: CGPoint(x: 4.09, y: 15.07))
        bezierPath.addCurve(to: CGPoint(x: 4.39, y: 16.23), controlPoint1: CGPoint(x: 4.09, y: 15.93), controlPoint2: CGPoint(x: 4.09, y: 15.93))
        bezierPath.addCurve(to: CGPoint(x: 5.13, y: 16.54), controlPoint1: CGPoint(x: 4.7, y: 16.54), controlPoint2: CGPoint(x: 4.7, y: 16.54))
        bezierPath.addLine(to: CGPoint(x: 7.28, y: 16.54))
        bezierPath.addCurve(to: CGPoint(x: 8.66, y: 19.87), controlPoint1: CGPoint(x: 7.54, y: 18.36), controlPoint2: CGPoint(x: 7.54, y: 18.36))
        bezierPath.addLine(to: CGPoint(x: 7.14, y: 21.39))
        bezierPath.addCurve(to: CGPoint(x: 6.84, y: 22.13), controlPoint1: CGPoint(x: 6.84, y: 21.69), controlPoint2: CGPoint(x: 6.84, y: 21.69))
        bezierPath.addCurve(to: CGPoint(x: 7.14, y: 22.87), controlPoint1: CGPoint(x: 6.84, y: 22.56), controlPoint2: CGPoint(x: 6.84, y: 22.56))
        bezierPath.addCurve(to: CGPoint(x: 7.88, y: 23.17), controlPoint1: CGPoint(x: 7.45, y: 23.17), controlPoint2: CGPoint(x: 7.45, y: 23.17))
        bezierPath.addCurve(to: CGPoint(x: 8.61, y: 22.86), controlPoint1: CGPoint(x: 8.3, y: 23.17), controlPoint2: CGPoint(x: 8.3, y: 23.17))
        bezierPath.addLine(to: CGPoint(x: 10.13, y: 21.34))
        bezierPath.addCurve(to: CGPoint(x: 13.46, y: 22.72), controlPoint1: CGPoint(x: 11.64, y: 22.46), controlPoint2: CGPoint(x: 11.64, y: 22.46))
        bezierPath.addLine(to: CGPoint(x: 13.46, y: 24.87))
        bezierPath.addCurve(to: CGPoint(x: 13.76, y: 25.61), controlPoint1: CGPoint(x: 13.46, y: 25.3), controlPoint2: CGPoint(x: 13.46, y: 25.3))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 25.91), controlPoint1: CGPoint(x: 14.07, y: 25.91), controlPoint2: CGPoint(x: 14.07, y: 25.91))
        bezierPath.addCurve(to: CGPoint(x: 15.24, y: 25.61), controlPoint1: CGPoint(x: 14.93, y: 25.91), controlPoint2: CGPoint(x: 14.93, y: 25.91))
        bezierPath.addCurve(to: CGPoint(x: 15.54, y: 24.87), controlPoint1: CGPoint(x: 15.54, y: 25.3), controlPoint2: CGPoint(x: 15.54, y: 25.3))
        bezierPath.addLine(to: CGPoint(x: 15.54, y: 22.72))
        bezierPath.addCurve(to: CGPoint(x: 18.87, y: 21.34), controlPoint1: CGPoint(x: 17.36, y: 22.46), controlPoint2: CGPoint(x: 17.36, y: 22.46))
        bezierPath.addLine(to: CGPoint(x: 20.39, y: 22.86))
        bezierPath.addCurve(to: CGPoint(x: 21.13, y: 23.17), controlPoint1: CGPoint(x: 20.7, y: 23.17), controlPoint2: CGPoint(x: 20.7, y: 23.17))
        bezierPath.addCurve(to: CGPoint(x: 21.87, y: 22.87), controlPoint1: CGPoint(x: 21.56, y: 23.17), controlPoint2: CGPoint(x: 21.56, y: 23.17))
        bezierPath.addCurve(to: CGPoint(x: 22.17, y: 22.13), controlPoint1: CGPoint(x: 22.17, y: 22.56), controlPoint2: CGPoint(x: 22.17, y: 22.56))
        bezierPath.addCurve(to: CGPoint(x: 21.86, y: 21.39), controlPoint1: CGPoint(x: 22.17, y: 21.7), controlPoint2: CGPoint(x: 22.17, y: 21.7))
        bezierPath.addLine(to: CGPoint(x: 20.34, y: 19.87))
        bezierPath.addCurve(to: CGPoint(x: 21.72, y: 16.54), controlPoint1: CGPoint(x: 21.46, y: 18.36), controlPoint2: CGPoint(x: 21.46, y: 18.36))
        bezierPath.addLine(to: CGPoint(x: 23.87, y: 16.54))
        bezierPath.addCurve(to: CGPoint(x: 24.61, y: 16.23), controlPoint1: CGPoint(x: 24.31, y: 16.54), controlPoint2: CGPoint(x: 24.31, y: 16.54))
        bezierPath.addCurve(to: CGPoint(x: 24.92, y: 15.5), controlPoint1: CGPoint(x: 24.92, y: 15.93), controlPoint2: CGPoint(x: 24.92, y: 15.93))
        bezierPath.addCurve(to: CGPoint(x: 24.61, y: 14.76), controlPoint1: CGPoint(x: 24.92, y: 15.07), controlPoint2: CGPoint(x: 24.92, y: 15.07))
        bezierPath.addCurve(to: CGPoint(x: 23.87, y: 14.46), controlPoint1: CGPoint(x: 24.31, y: 14.46), controlPoint2: CGPoint(x: 24.31, y: 14.46))
        bezierPath.addLine(to: CGPoint(x: 21.72, y: 14.46))
        bezierPath.addCurve(to: CGPoint(x: 20.34, y: 11.13), controlPoint1: CGPoint(x: 21.46, y: 12.63), controlPoint2: CGPoint(x: 21.46, y: 12.63))
        bezierPath.addLine(to: CGPoint(x: 21.86, y: 9.61))
        bezierPath.addCurve(to: CGPoint(x: 22.17, y: 8.87), controlPoint1: CGPoint(x: 22.17, y: 9.3), controlPoint2: CGPoint(x: 22.17, y: 9.3))
        bezierPath.addCurve(to: CGPoint(x: 21.87, y: 8.13), controlPoint1: CGPoint(x: 22.17, y: 8.43), controlPoint2: CGPoint(x: 22.17, y: 8.43))
        bezierPath.addCurve(to: CGPoint(x: 21.13, y: 7.83), controlPoint1: CGPoint(x: 21.56, y: 7.83), controlPoint2: CGPoint(x: 21.56, y: 7.83))
        bezierPath.addCurve(to: CGPoint(x: 20.39, y: 8.13), controlPoint1: CGPoint(x: 20.7, y: 7.82), controlPoint2: CGPoint(x: 20.7, y: 7.82))
        bezierPath.addLine(to: CGPoint(x: 18.87, y: 9.66))
        bezierPath.addCurve(to: CGPoint(x: 15.54, y: 8.28), controlPoint1: CGPoint(x: 17.36, y: 8.54), controlPoint2: CGPoint(x: 17.36, y: 8.54))
        bezierPath.addLine(to: CGPoint(x: 15.54, y: 6.12))
        bezierPath.addCurve(to: CGPoint(x: 15.24, y: 5.39), controlPoint1: CGPoint(x: 15.54, y: 5.69), controlPoint2: CGPoint(x: 15.54, y: 5.69))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 5.08), controlPoint1: CGPoint(x: 14.93, y: 5.08), controlPoint2: CGPoint(x: 14.93, y: 5.08))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.5, y: 11.33))
        bezierPath.addCurve(to: CGPoint(x: 17.45, y: 12.55), controlPoint1: CGPoint(x: 16.23, y: 11.33), controlPoint2: CGPoint(x: 16.23, y: 11.33))
        bezierPath.addCurve(to: CGPoint(x: 18.67, y: 15.5), controlPoint1: CGPoint(x: 18.67, y: 13.78), controlPoint2: CGPoint(x: 18.67, y: 13.78))
        bezierPath.addCurve(to: CGPoint(x: 17.45, y: 18.45), controlPoint1: CGPoint(x: 18.67, y: 17.23), controlPoint2: CGPoint(x: 18.67, y: 17.22))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 19.67), controlPoint1: CGPoint(x: 16.23, y: 19.67), controlPoint2: CGPoint(x: 16.23, y: 19.67))
        bezierPath.addCurve(to: CGPoint(x: 11.55, y: 18.45), controlPoint1: CGPoint(x: 12.78, y: 19.67), controlPoint2: CGPoint(x: 12.78, y: 19.67))
        bezierPath.addCurve(to: CGPoint(x: 10.33, y: 15.5), controlPoint1: CGPoint(x: 10.33, y: 17.22), controlPoint2: CGPoint(x: 10.33, y: 17.23))
        bezierPath.addCurve(to: CGPoint(x: 11.55, y: 12.55), controlPoint1: CGPoint(x: 10.33, y: 13.78), controlPoint2: CGPoint(x: 10.33, y: 13.78))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 11.33), controlPoint1: CGPoint(x: 12.78, y: 11.33), controlPoint2: CGPoint(x: 12.78, y: 11.33))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.5, y: 13.42))
        bezierPath.addCurve(to: CGPoint(x: 13.03, y: 14.03), controlPoint1: CGPoint(x: 13.64, y: 13.42), controlPoint2: CGPoint(x: 13.64, y: 13.42))
        bezierPath.addCurve(to: CGPoint(x: 12.42, y: 15.5), controlPoint1: CGPoint(x: 12.42, y: 14.64), controlPoint2: CGPoint(x: 12.42, y: 14.64))
        bezierPath.addCurve(to: CGPoint(x: 13.03, y: 16.97), controlPoint1: CGPoint(x: 12.42, y: 16.36), controlPoint2: CGPoint(x: 12.42, y: 16.36))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 17.58), controlPoint1: CGPoint(x: 13.64, y: 17.58), controlPoint2: CGPoint(x: 13.64, y: 17.58))
        bezierPath.addCurve(to: CGPoint(x: 15.97, y: 16.97), controlPoint1: CGPoint(x: 15.36, y: 17.58), controlPoint2: CGPoint(x: 15.36, y: 17.58))
        bezierPath.addCurve(to: CGPoint(x: 16.58, y: 15.5), controlPoint1: CGPoint(x: 16.58, y: 16.36), controlPoint2: CGPoint(x: 16.58, y: 16.36))
        bezierPath.addCurve(to: CGPoint(x: 15.97, y: 14.03), controlPoint1: CGPoint(x: 16.58, y: 14.64), controlPoint2: CGPoint(x: 16.58, y: 14.64))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 13.42), controlPoint1: CGPoint(x: 15.36, y: 13.42), controlPoint2: CGPoint(x: 15.36, y: 13.42))
        bezierPath.close()
        fillColor.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawTasks_selected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 16.29, y: 23.64))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 23.64))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 21.86))
        bezierPath.addLine(to: CGPoint(x: 16.29, y: 21.86))
        bezierPath.addLine(to: CGPoint(x: 16.29, y: 23.64))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 10.93, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 16.5))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 14.71))
        bezierPath.addLine(to: CGPoint(x: 10.93, y: 14.71))
        bezierPath.addLine(to: CGPoint(x: 10.93, y: 16.5))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 19.86, y: 9.36))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 9.36))
        bezierPath.addLine(to: CGPoint(x: 25.21, y: 7.57))
        bezierPath.addLine(to: CGPoint(x: 19.86, y: 7.57))
        bezierPath.addLine(to: CGPoint(x: 19.86, y: 9.36))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 27, y: 20.96))
        bezierPath.addLine(to: CGPoint(x: 27, y: 24.53))
        bezierPath.addCurve(to: CGPoint(x: 26.11, y: 25.43), controlPoint1: CGPoint(x: 27, y: 25.02), controlPoint2: CGPoint(x: 26.59, y: 25.43))
        bezierPath.addLine(to: CGPoint(x: 2.89, y: 25.43))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 24.53), controlPoint1: CGPoint(x: 2.41, y: 25.43), controlPoint2: CGPoint(x: 2, y: 25.02))
        bezierPath.addLine(to: CGPoint(x: 2, y: 20.96))
        bezierPath.addCurve(to: CGPoint(x: 2.89, y: 20.07), controlPoint1: CGPoint(x: 2, y: 20.48), controlPoint2: CGPoint(x: 2.41, y: 20.07))
        bezierPath.addLine(to: CGPoint(x: 26.11, y: 20.07))
        bezierPath.addCurve(to: CGPoint(x: 27, y: 20.96), controlPoint1: CGPoint(x: 26.59, y: 20.07), controlPoint2: CGPoint(x: 27, y: 20.48))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 27, y: 13.82))
        bezierPath.addLine(to: CGPoint(x: 27, y: 17.39))
        bezierPath.addCurve(to: CGPoint(x: 26.11, y: 18.28), controlPoint1: CGPoint(x: 27, y: 17.88), controlPoint2: CGPoint(x: 26.59, y: 18.28))
        bezierPath.addLine(to: CGPoint(x: 2.89, y: 18.28))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 17.39), controlPoint1: CGPoint(x: 2.41, y: 18.28), controlPoint2: CGPoint(x: 2, y: 17.88))
        bezierPath.addLine(to: CGPoint(x: 2, y: 13.82))
        bezierPath.addCurve(to: CGPoint(x: 2.89, y: 12.93), controlPoint1: CGPoint(x: 2, y: 13.33), controlPoint2: CGPoint(x: 2.41, y: 12.93))
        bezierPath.addLine(to: CGPoint(x: 26.11, y: 12.93))
        bezierPath.addCurve(to: CGPoint(x: 27, y: 13.82), controlPoint1: CGPoint(x: 26.59, y: 12.93), controlPoint2: CGPoint(x: 27, y: 13.33))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 27, y: 6.68))
        bezierPath.addLine(to: CGPoint(x: 27, y: 10.25))
        bezierPath.addCurve(to: CGPoint(x: 26.11, y: 11.14), controlPoint1: CGPoint(x: 27, y: 10.74), controlPoint2: CGPoint(x: 26.59, y: 11.14))
        bezierPath.addLine(to: CGPoint(x: 2.89, y: 11.14))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 10.25), controlPoint1: CGPoint(x: 2.41, y: 11.14), controlPoint2: CGPoint(x: 2, y: 10.74))
        bezierPath.addLine(to: CGPoint(x: 2, y: 6.68))
        bezierPath.addCurve(to: CGPoint(x: 2.89, y: 5.79), controlPoint1: CGPoint(x: 2, y: 6.19), controlPoint2: CGPoint(x: 2.41, y: 5.79))
        bezierPath.addLine(to: CGPoint(x: 26.11, y: 5.79))
        bezierPath.addCurve(to: CGPoint(x: 27, y: 6.68), controlPoint1: CGPoint(x: 26.59, y: 5.79), controlPoint2: CGPoint(x: 27, y: 6.19))
        bezierPath.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawSettings_selected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 14.5, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 16.71, y: 3.92), controlPoint1: CGPoint(x: 15.79, y: 3), controlPoint2: CGPoint(x: 15.79, y: 3))
        bezierPath.addCurve(to: CGPoint(x: 17.62, y: 6.13), controlPoint1: CGPoint(x: 17.62, y: 4.83), controlPoint2: CGPoint(x: 17.62, y: 4.83))
        bezierPath.addLine(to: CGPoint(x: 17.62, y: 6.66))
        bezierPath.addCurve(to: CGPoint(x: 18.55, y: 7.04), controlPoint1: CGPoint(x: 18.01, y: 6.79), controlPoint2: CGPoint(x: 18.01, y: 6.79))
        bezierPath.addLine(to: CGPoint(x: 18.92, y: 6.66))
        bezierPath.addCurve(to: CGPoint(x: 21.13, y: 5.74), controlPoint1: CGPoint(x: 19.84, y: 5.74), controlPoint2: CGPoint(x: 19.84, y: 5.74))
        bezierPath.addCurve(to: CGPoint(x: 23.34, y: 6.66), controlPoint1: CGPoint(x: 22.42, y: 5.74), controlPoint2: CGPoint(x: 22.42, y: 5.74))
        bezierPath.addCurve(to: CGPoint(x: 24.26, y: 8.87), controlPoint1: CGPoint(x: 24.26, y: 7.58), controlPoint2: CGPoint(x: 24.26, y: 7.58))
        bezierPath.addCurve(to: CGPoint(x: 23.34, y: 11.08), controlPoint1: CGPoint(x: 24.26, y: 10.16), controlPoint2: CGPoint(x: 24.26, y: 10.16))
        bezierPath.addLine(to: CGPoint(x: 22.96, y: 11.46))
        bezierPath.addCurve(to: CGPoint(x: 23.34, y: 12.38), controlPoint1: CGPoint(x: 23.21, y: 11.99), controlPoint2: CGPoint(x: 23.21, y: 11.99))
        bezierPath.addLine(to: CGPoint(x: 23.88, y: 12.38))
        bezierPath.addCurve(to: CGPoint(x: 26.08, y: 13.29), controlPoint1: CGPoint(x: 25.17, y: 12.38), controlPoint2: CGPoint(x: 25.17, y: 12.38))
        bezierPath.addCurve(to: CGPoint(x: 27, y: 15.5), controlPoint1: CGPoint(x: 27, y: 14.21), controlPoint2: CGPoint(x: 27, y: 14.21))
        bezierPath.addCurve(to: CGPoint(x: 26.08, y: 17.71), controlPoint1: CGPoint(x: 27, y: 16.79), controlPoint2: CGPoint(x: 27, y: 16.79))
        bezierPath.addCurve(to: CGPoint(x: 23.88, y: 18.63), controlPoint1: CGPoint(x: 25.17, y: 18.63), controlPoint2: CGPoint(x: 25.17, y: 18.63))
        bezierPath.addLine(to: CGPoint(x: 23.34, y: 18.63))
        bezierPath.addCurve(to: CGPoint(x: 22.96, y: 19.55), controlPoint1: CGPoint(x: 23.21, y: 19.01), controlPoint2: CGPoint(x: 23.21, y: 19.01))
        bezierPath.addLine(to: CGPoint(x: 23.34, y: 19.92))
        bezierPath.addCurve(to: CGPoint(x: 24.26, y: 22.13), controlPoint1: CGPoint(x: 24.26, y: 20.84), controlPoint2: CGPoint(x: 24.26, y: 20.84))
        bezierPath.addCurve(to: CGPoint(x: 23.34, y: 24.34), controlPoint1: CGPoint(x: 24.26, y: 23.42), controlPoint2: CGPoint(x: 24.26, y: 23.42))
        bezierPath.addCurve(to: CGPoint(x: 21.13, y: 25.26), controlPoint1: CGPoint(x: 22.42, y: 25.26), controlPoint2: CGPoint(x: 22.42, y: 25.26))
        bezierPath.addCurve(to: CGPoint(x: 18.92, y: 24.34), controlPoint1: CGPoint(x: 19.84, y: 25.26), controlPoint2: CGPoint(x: 19.84, y: 25.26))
        bezierPath.addLine(to: CGPoint(x: 18.55, y: 23.96))
        bezierPath.addCurve(to: CGPoint(x: 17.63, y: 24.34), controlPoint1: CGPoint(x: 18.01, y: 24.21), controlPoint2: CGPoint(x: 18.01, y: 24.21))
        bezierPath.addLine(to: CGPoint(x: 17.63, y: 24.88))
        bezierPath.addCurve(to: CGPoint(x: 16.71, y: 27.08), controlPoint1: CGPoint(x: 17.63, y: 26.17), controlPoint2: CGPoint(x: 17.63, y: 26.17))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 28), controlPoint1: CGPoint(x: 15.79, y: 28), controlPoint2: CGPoint(x: 15.79, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 12.29, y: 27.08), controlPoint1: CGPoint(x: 13.21, y: 28), controlPoint2: CGPoint(x: 13.21, y: 28))
        bezierPath.addCurve(to: CGPoint(x: 11.38, y: 24.88), controlPoint1: CGPoint(x: 11.38, y: 26.17), controlPoint2: CGPoint(x: 11.38, y: 26.17))
        bezierPath.addLine(to: CGPoint(x: 11.38, y: 24.34))
        bezierPath.addCurve(to: CGPoint(x: 10.46, y: 23.96), controlPoint1: CGPoint(x: 10.99, y: 24.21), controlPoint2: CGPoint(x: 10.99, y: 24.21))
        bezierPath.addLine(to: CGPoint(x: 10.08, y: 24.34))
        bezierPath.addCurve(to: CGPoint(x: 7.88, y: 25.26), controlPoint1: CGPoint(x: 9.16, y: 25.26), controlPoint2: CGPoint(x: 9.16, y: 25.26))
        bezierPath.addCurve(to: CGPoint(x: 5.67, y: 24.34), controlPoint1: CGPoint(x: 6.58, y: 25.26), controlPoint2: CGPoint(x: 6.58, y: 25.26))
        bezierPath.addCurve(to: CGPoint(x: 4.75, y: 22.13), controlPoint1: CGPoint(x: 4.75, y: 23.42), controlPoint2: CGPoint(x: 4.75, y: 23.42))
        bezierPath.addCurve(to: CGPoint(x: 5.66, y: 19.92), controlPoint1: CGPoint(x: 4.75, y: 20.83), controlPoint2: CGPoint(x: 4.75, y: 20.83))
        bezierPath.addLine(to: CGPoint(x: 6.04, y: 19.55))
        bezierPath.addCurve(to: CGPoint(x: 5.66, y: 18.63), controlPoint1: CGPoint(x: 5.79, y: 19.01), controlPoint2: CGPoint(x: 5.79, y: 19.01))
        bezierPath.addLine(to: CGPoint(x: 5.13, y: 18.63))
        bezierPath.addCurve(to: CGPoint(x: 2.92, y: 17.71), controlPoint1: CGPoint(x: 3.83, y: 18.63), controlPoint2: CGPoint(x: 3.83, y: 18.63))
        bezierPath.addCurve(to: CGPoint(x: 2, y: 15.5), controlPoint1: CGPoint(x: 2, y: 16.79), controlPoint2: CGPoint(x: 2, y: 16.79))
        bezierPath.addCurve(to: CGPoint(x: 2.92, y: 13.29), controlPoint1: CGPoint(x: 2, y: 14.21), controlPoint2: CGPoint(x: 2, y: 14.21))
        bezierPath.addCurve(to: CGPoint(x: 5.13, y: 12.38), controlPoint1: CGPoint(x: 3.83, y: 12.38), controlPoint2: CGPoint(x: 3.83, y: 12.38))
        bezierPath.addLine(to: CGPoint(x: 5.66, y: 12.38))
        bezierPath.addCurve(to: CGPoint(x: 6.04, y: 11.46), controlPoint1: CGPoint(x: 5.79, y: 11.99), controlPoint2: CGPoint(x: 5.79, y: 11.99))
        bezierPath.addLine(to: CGPoint(x: 5.66, y: 11.08))
        bezierPath.addCurve(to: CGPoint(x: 4.75, y: 8.87), controlPoint1: CGPoint(x: 4.75, y: 10.17), controlPoint2: CGPoint(x: 4.75, y: 10.17))
        bezierPath.addCurve(to: CGPoint(x: 5.67, y: 6.66), controlPoint1: CGPoint(x: 4.75, y: 7.58), controlPoint2: CGPoint(x: 4.75, y: 7.58))
        bezierPath.addCurve(to: CGPoint(x: 7.88, y: 5.74), controlPoint1: CGPoint(x: 6.58, y: 5.74), controlPoint2: CGPoint(x: 6.58, y: 5.74))
        bezierPath.addCurve(to: CGPoint(x: 10.08, y: 6.66), controlPoint1: CGPoint(x: 9.16, y: 5.74), controlPoint2: CGPoint(x: 9.16, y: 5.74))
        bezierPath.addLine(to: CGPoint(x: 10.46, y: 7.04))
        bezierPath.addCurve(to: CGPoint(x: 11.38, y: 6.66), controlPoint1: CGPoint(x: 10.99, y: 6.79), controlPoint2: CGPoint(x: 10.99, y: 6.79))
        bezierPath.addLine(to: CGPoint(x: 11.38, y: 6.13))
        bezierPath.addCurve(to: CGPoint(x: 12.29, y: 3.92), controlPoint1: CGPoint(x: 11.38, y: 4.83), controlPoint2: CGPoint(x: 11.38, y: 4.83))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 3), controlPoint1: CGPoint(x: 13.21, y: 3), controlPoint2: CGPoint(x: 13.21, y: 3))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.5, y: 5.08))
        bezierPath.addCurve(to: CGPoint(x: 13.76, y: 5.39), controlPoint1: CGPoint(x: 14.07, y: 5.08), controlPoint2: CGPoint(x: 14.07, y: 5.08))
        bezierPath.addCurve(to: CGPoint(x: 13.46, y: 6.12), controlPoint1: CGPoint(x: 13.46, y: 5.69), controlPoint2: CGPoint(x: 13.46, y: 5.69))
        bezierPath.addLine(to: CGPoint(x: 13.46, y: 8.28))
        bezierPath.addCurve(to: CGPoint(x: 10.13, y: 9.66), controlPoint1: CGPoint(x: 11.64, y: 8.54), controlPoint2: CGPoint(x: 11.64, y: 8.54))
        bezierPath.addLine(to: CGPoint(x: 8.61, y: 8.13))
        bezierPath.addCurve(to: CGPoint(x: 7.88, y: 7.82), controlPoint1: CGPoint(x: 8.3, y: 7.83), controlPoint2: CGPoint(x: 8.3, y: 7.82))
        bezierPath.addCurve(to: CGPoint(x: 7.14, y: 8.13), controlPoint1: CGPoint(x: 7.45, y: 7.82), controlPoint2: CGPoint(x: 7.45, y: 7.82))
        bezierPath.addCurve(to: CGPoint(x: 6.84, y: 8.87), controlPoint1: CGPoint(x: 6.84, y: 8.43), controlPoint2: CGPoint(x: 6.84, y: 8.44))
        bezierPath.addCurve(to: CGPoint(x: 7.14, y: 9.61), controlPoint1: CGPoint(x: 6.84, y: 9.31), controlPoint2: CGPoint(x: 6.84, y: 9.31))
        bezierPath.addLine(to: CGPoint(x: 8.66, y: 11.13))
        bezierPath.addCurve(to: CGPoint(x: 7.28, y: 14.46), controlPoint1: CGPoint(x: 7.54, y: 12.63), controlPoint2: CGPoint(x: 7.54, y: 12.63))
        bezierPath.addLine(to: CGPoint(x: 5.13, y: 14.46))
        bezierPath.addCurve(to: CGPoint(x: 4.39, y: 14.76), controlPoint1: CGPoint(x: 4.7, y: 14.46), controlPoint2: CGPoint(x: 4.7, y: 14.46))
        bezierPath.addCurve(to: CGPoint(x: 4.09, y: 15.5), controlPoint1: CGPoint(x: 4.09, y: 15.07), controlPoint2: CGPoint(x: 4.09, y: 15.07))
        bezierPath.addCurve(to: CGPoint(x: 4.39, y: 16.23), controlPoint1: CGPoint(x: 4.09, y: 15.93), controlPoint2: CGPoint(x: 4.09, y: 15.93))
        bezierPath.addCurve(to: CGPoint(x: 5.13, y: 16.54), controlPoint1: CGPoint(x: 4.7, y: 16.54), controlPoint2: CGPoint(x: 4.7, y: 16.54))
        bezierPath.addLine(to: CGPoint(x: 7.28, y: 16.54))
        bezierPath.addCurve(to: CGPoint(x: 8.66, y: 19.87), controlPoint1: CGPoint(x: 7.54, y: 18.36), controlPoint2: CGPoint(x: 7.54, y: 18.36))
        bezierPath.addLine(to: CGPoint(x: 7.14, y: 21.39))
        bezierPath.addCurve(to: CGPoint(x: 6.84, y: 22.13), controlPoint1: CGPoint(x: 6.84, y: 21.69), controlPoint2: CGPoint(x: 6.84, y: 21.69))
        bezierPath.addCurve(to: CGPoint(x: 7.14, y: 22.87), controlPoint1: CGPoint(x: 6.84, y: 22.56), controlPoint2: CGPoint(x: 6.84, y: 22.56))
        bezierPath.addCurve(to: CGPoint(x: 7.88, y: 23.17), controlPoint1: CGPoint(x: 7.45, y: 23.17), controlPoint2: CGPoint(x: 7.45, y: 23.17))
        bezierPath.addCurve(to: CGPoint(x: 8.61, y: 22.86), controlPoint1: CGPoint(x: 8.3, y: 23.17), controlPoint2: CGPoint(x: 8.3, y: 23.17))
        bezierPath.addLine(to: CGPoint(x: 10.13, y: 21.34))
        bezierPath.addCurve(to: CGPoint(x: 13.46, y: 22.72), controlPoint1: CGPoint(x: 11.64, y: 22.46), controlPoint2: CGPoint(x: 11.64, y: 22.46))
        bezierPath.addLine(to: CGPoint(x: 13.46, y: 24.87))
        bezierPath.addCurve(to: CGPoint(x: 13.76, y: 25.61), controlPoint1: CGPoint(x: 13.46, y: 25.3), controlPoint2: CGPoint(x: 13.46, y: 25.3))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 25.91), controlPoint1: CGPoint(x: 14.07, y: 25.91), controlPoint2: CGPoint(x: 14.07, y: 25.91))
        bezierPath.addCurve(to: CGPoint(x: 15.24, y: 25.61), controlPoint1: CGPoint(x: 14.93, y: 25.91), controlPoint2: CGPoint(x: 14.93, y: 25.91))
        bezierPath.addCurve(to: CGPoint(x: 15.54, y: 24.87), controlPoint1: CGPoint(x: 15.54, y: 25.3), controlPoint2: CGPoint(x: 15.54, y: 25.3))
        bezierPath.addLine(to: CGPoint(x: 15.54, y: 22.72))
        bezierPath.addCurve(to: CGPoint(x: 18.87, y: 21.34), controlPoint1: CGPoint(x: 17.36, y: 22.46), controlPoint2: CGPoint(x: 17.36, y: 22.46))
        bezierPath.addLine(to: CGPoint(x: 20.39, y: 22.86))
        bezierPath.addCurve(to: CGPoint(x: 21.13, y: 23.17), controlPoint1: CGPoint(x: 20.7, y: 23.17), controlPoint2: CGPoint(x: 20.7, y: 23.17))
        bezierPath.addCurve(to: CGPoint(x: 21.87, y: 22.87), controlPoint1: CGPoint(x: 21.56, y: 23.17), controlPoint2: CGPoint(x: 21.56, y: 23.17))
        bezierPath.addCurve(to: CGPoint(x: 22.17, y: 22.13), controlPoint1: CGPoint(x: 22.17, y: 22.56), controlPoint2: CGPoint(x: 22.17, y: 22.56))
        bezierPath.addCurve(to: CGPoint(x: 21.86, y: 21.39), controlPoint1: CGPoint(x: 22.17, y: 21.7), controlPoint2: CGPoint(x: 22.17, y: 21.7))
        bezierPath.addLine(to: CGPoint(x: 20.34, y: 19.87))
        bezierPath.addCurve(to: CGPoint(x: 21.72, y: 16.54), controlPoint1: CGPoint(x: 21.46, y: 18.36), controlPoint2: CGPoint(x: 21.46, y: 18.36))
        bezierPath.addLine(to: CGPoint(x: 23.87, y: 16.54))
        bezierPath.addCurve(to: CGPoint(x: 24.61, y: 16.23), controlPoint1: CGPoint(x: 24.3, y: 16.54), controlPoint2: CGPoint(x: 24.3, y: 16.54))
        bezierPath.addCurve(to: CGPoint(x: 24.91, y: 15.5), controlPoint1: CGPoint(x: 24.91, y: 15.93), controlPoint2: CGPoint(x: 24.91, y: 15.93))
        bezierPath.addCurve(to: CGPoint(x: 24.61, y: 14.76), controlPoint1: CGPoint(x: 24.91, y: 15.07), controlPoint2: CGPoint(x: 24.91, y: 15.07))
        bezierPath.addCurve(to: CGPoint(x: 23.87, y: 14.46), controlPoint1: CGPoint(x: 24.3, y: 14.46), controlPoint2: CGPoint(x: 24.3, y: 14.46))
        bezierPath.addLine(to: CGPoint(x: 21.72, y: 14.46))
        bezierPath.addCurve(to: CGPoint(x: 20.34, y: 11.13), controlPoint1: CGPoint(x: 21.46, y: 12.63), controlPoint2: CGPoint(x: 21.46, y: 12.63))
        bezierPath.addLine(to: CGPoint(x: 21.86, y: 9.61))
        bezierPath.addCurve(to: CGPoint(x: 22.17, y: 8.87), controlPoint1: CGPoint(x: 22.17, y: 9.3), controlPoint2: CGPoint(x: 22.17, y: 9.3))
        bezierPath.addCurve(to: CGPoint(x: 21.87, y: 8.13), controlPoint1: CGPoint(x: 22.17, y: 8.43), controlPoint2: CGPoint(x: 22.17, y: 8.43))
        bezierPath.addCurve(to: CGPoint(x: 21.13, y: 7.83), controlPoint1: CGPoint(x: 21.56, y: 7.83), controlPoint2: CGPoint(x: 21.56, y: 7.83))
        bezierPath.addCurve(to: CGPoint(x: 20.39, y: 8.13), controlPoint1: CGPoint(x: 20.7, y: 7.82), controlPoint2: CGPoint(x: 20.7, y: 7.82))
        bezierPath.addLine(to: CGPoint(x: 18.87, y: 9.66))
        bezierPath.addCurve(to: CGPoint(x: 15.54, y: 8.28), controlPoint1: CGPoint(x: 17.36, y: 8.54), controlPoint2: CGPoint(x: 17.36, y: 8.54))
        bezierPath.addLine(to: CGPoint(x: 15.54, y: 6.12))
        bezierPath.addCurve(to: CGPoint(x: 15.24, y: 5.39), controlPoint1: CGPoint(x: 15.54, y: 5.69), controlPoint2: CGPoint(x: 15.54, y: 5.69))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 5.08), controlPoint1: CGPoint(x: 14.93, y: 5.08), controlPoint2: CGPoint(x: 14.93, y: 5.08))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.5, y: 11.33))
        bezierPath.addCurve(to: CGPoint(x: 17.45, y: 12.55), controlPoint1: CGPoint(x: 16.22, y: 11.33), controlPoint2: CGPoint(x: 16.22, y: 11.33))
        bezierPath.addCurve(to: CGPoint(x: 18.67, y: 15.5), controlPoint1: CGPoint(x: 18.67, y: 13.78), controlPoint2: CGPoint(x: 18.67, y: 13.78))
        bezierPath.addCurve(to: CGPoint(x: 17.45, y: 18.45), controlPoint1: CGPoint(x: 18.67, y: 17.23), controlPoint2: CGPoint(x: 18.67, y: 17.23))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 19.67), controlPoint1: CGPoint(x: 16.23, y: 19.67), controlPoint2: CGPoint(x: 16.23, y: 19.67))
        bezierPath.addCurve(to: CGPoint(x: 11.55, y: 18.45), controlPoint1: CGPoint(x: 12.78, y: 19.67), controlPoint2: CGPoint(x: 12.78, y: 19.67))
        bezierPath.addCurve(to: CGPoint(x: 10.33, y: 15.5), controlPoint1: CGPoint(x: 10.33, y: 17.23), controlPoint2: CGPoint(x: 10.33, y: 17.23))
        bezierPath.addCurve(to: CGPoint(x: 11.55, y: 12.55), controlPoint1: CGPoint(x: 10.33, y: 13.78), controlPoint2: CGPoint(x: 10.33, y: 13.78))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 11.33), controlPoint1: CGPoint(x: 12.78, y: 11.33), controlPoint2: CGPoint(x: 12.78, y: 11.33))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 14.5, y: 13.42))
        bezierPath.addCurve(to: CGPoint(x: 13.03, y: 14.03), controlPoint1: CGPoint(x: 13.64, y: 13.42), controlPoint2: CGPoint(x: 13.64, y: 13.42))
        bezierPath.addCurve(to: CGPoint(x: 12.42, y: 15.5), controlPoint1: CGPoint(x: 12.42, y: 14.64), controlPoint2: CGPoint(x: 12.42, y: 14.64))
        bezierPath.addCurve(to: CGPoint(x: 13.03, y: 16.97), controlPoint1: CGPoint(x: 12.42, y: 16.36), controlPoint2: CGPoint(x: 12.42, y: 16.36))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 17.58), controlPoint1: CGPoint(x: 13.64, y: 17.58), controlPoint2: CGPoint(x: 13.64, y: 17.58))
        bezierPath.addCurve(to: CGPoint(x: 15.97, y: 16.97), controlPoint1: CGPoint(x: 15.36, y: 17.58), controlPoint2: CGPoint(x: 15.36, y: 17.58))
        bezierPath.addCurve(to: CGPoint(x: 16.58, y: 15.5), controlPoint1: CGPoint(x: 16.58, y: 16.36), controlPoint2: CGPoint(x: 16.58, y: 16.36))
        bezierPath.addCurve(to: CGPoint(x: 15.97, y: 14.03), controlPoint1: CGPoint(x: 16.58, y: 14.64), controlPoint2: CGPoint(x: 16.58, y: 14.64))
        bezierPath.addCurve(to: CGPoint(x: 14.5, y: 13.42), controlPoint1: CGPoint(x: 15.36, y: 13.42), controlPoint2: CGPoint(x: 15.36, y: 13.42))
        bezierPath.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    public dynamic class func drawSpeech_bubble_selected(frame targetFrame: CGRect = CGRect(x: 0, y: 0, width: 30, height: 30), resizing: ResizingBehavior = .aspectFit) {
        //// General Declarations
        let context = UIGraphicsGetCurrentContext()!
        
        //// Resize to Target Frame
        context.saveGState()
        let resizedFrame: CGRect = resizing.apply(rect: CGRect(x: 0, y: 0, width: 30, height: 30), target: targetFrame)
        context.translateBy(x: resizedFrame.minX, y: resizedFrame.minY)
        context.scaleBy(x: resizedFrame.width / 30, y: resizedFrame.height / 30)


        //// Bezier Drawing
        let bezierPath = UIBezierPath()
        bezierPath.move(to: CGPoint(x: 6.17, y: 4.04))
        bezierPath.addLine(to: CGPoint(x: 22.83, y: 4.04))
        bezierPath.addCurve(to: CGPoint(x: 25.04, y: 4.96), controlPoint1: CGPoint(x: 24.13, y: 4.04), controlPoint2: CGPoint(x: 24.13, y: 4.04))
        bezierPath.addCurve(to: CGPoint(x: 25.96, y: 7.17), controlPoint1: CGPoint(x: 25.96, y: 5.87), controlPoint2: CGPoint(x: 25.96, y: 5.87))
        bezierPath.addLine(to: CGPoint(x: 25.96, y: 18.62))
        bezierPath.addCurve(to: CGPoint(x: 25.04, y: 20.83), controlPoint1: CGPoint(x: 25.96, y: 19.92), controlPoint2: CGPoint(x: 25.96, y: 19.92))
        bezierPath.addCurve(to: CGPoint(x: 22.83, y: 21.75), controlPoint1: CGPoint(x: 24.13, y: 21.75), controlPoint2: CGPoint(x: 24.13, y: 21.75))
        bezierPath.addLine(to: CGPoint(x: 14.5, y: 21.75))
        bezierPath.addLine(to: CGPoint(x: 7.21, y: 26.96))
        bezierPath.addLine(to: CGPoint(x: 7.21, y: 21.75))
        bezierPath.addLine(to: CGPoint(x: 6.17, y: 21.75))
        bezierPath.addCurve(to: CGPoint(x: 3.96, y: 20.83), controlPoint1: CGPoint(x: 4.87, y: 21.75), controlPoint2: CGPoint(x: 4.87, y: 21.75))
        bezierPath.addCurve(to: CGPoint(x: 3.04, y: 18.62), controlPoint1: CGPoint(x: 3.04, y: 19.92), controlPoint2: CGPoint(x: 3.04, y: 19.92))
        bezierPath.addLine(to: CGPoint(x: 3.04, y: 7.17))
        bezierPath.addCurve(to: CGPoint(x: 3.96, y: 4.96), controlPoint1: CGPoint(x: 3.04, y: 5.87), controlPoint2: CGPoint(x: 3.04, y: 5.87))
        bezierPath.addCurve(to: CGPoint(x: 6.17, y: 4.04), controlPoint1: CGPoint(x: 4.87, y: 4.04), controlPoint2: CGPoint(x: 4.87, y: 4.04))
        bezierPath.close()
        bezierPath.move(to: CGPoint(x: 22.83, y: 6.12))
        bezierPath.addLine(to: CGPoint(x: 6.17, y: 6.12))
        bezierPath.addCurve(to: CGPoint(x: 5.43, y: 6.43), controlPoint1: CGPoint(x: 5.73, y: 6.12), controlPoint2: CGPoint(x: 5.73, y: 6.13))
        bezierPath.addCurve(to: CGPoint(x: 5.12, y: 7.17), controlPoint1: CGPoint(x: 5.12, y: 6.74), controlPoint2: CGPoint(x: 5.12, y: 6.73))
        bezierPath.addLine(to: CGPoint(x: 5.12, y: 18.62))
        bezierPath.addCurve(to: CGPoint(x: 5.43, y: 19.36), controlPoint1: CGPoint(x: 5.12, y: 19.05), controlPoint2: CGPoint(x: 5.12, y: 19.05))
        bezierPath.addCurve(to: CGPoint(x: 6.17, y: 19.66), controlPoint1: CGPoint(x: 5.73, y: 19.66), controlPoint2: CGPoint(x: 5.73, y: 19.66))
        bezierPath.addLine(to: CGPoint(x: 9.29, y: 19.66))
        bezierPath.addLine(to: CGPoint(x: 9.29, y: 22.91))
        bezierPath.addLine(to: CGPoint(x: 13.83, y: 19.66))
        bezierPath.addLine(to: CGPoint(x: 22.83, y: 19.66))
        bezierPath.addCurve(to: CGPoint(x: 23.57, y: 19.36), controlPoint1: CGPoint(x: 23.26, y: 19.66), controlPoint2: CGPoint(x: 23.26, y: 19.66))
        bezierPath.addCurve(to: CGPoint(x: 23.87, y: 18.62), controlPoint1: CGPoint(x: 23.87, y: 19.05), controlPoint2: CGPoint(x: 23.87, y: 19.05))
        bezierPath.addLine(to: CGPoint(x: 23.87, y: 7.17))
        bezierPath.addCurve(to: CGPoint(x: 23.57, y: 6.43), controlPoint1: CGPoint(x: 23.87, y: 6.73), controlPoint2: CGPoint(x: 23.87, y: 6.74))
        bezierPath.addCurve(to: CGPoint(x: 22.83, y: 6.12), controlPoint1: CGPoint(x: 23.26, y: 6.13), controlPoint2: CGPoint(x: 23.26, y: 6.12))
        bezierPath.close()
        TaskStudioStyleKit.fillColor4.setFill()
        bezierPath.fill()
        
        context.restoreGState()

    }

    //// Generated Images

    public dynamic class var imageOfIcon_titleImage: UIImage {
        if Cache.imageOfIcon_titleImage != nil {
            return Cache.imageOfIcon_titleImage!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 20, height: 20), false, 0)
            TaskStudioStyleKit.drawIcon_titleImage()

        Cache.imageOfIcon_titleImage = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_titleImage!
    }

    public dynamic class var imageOfIcon_titleImage40: UIImage {
        if Cache.imageOfIcon_titleImage40 != nil {
            return Cache.imageOfIcon_titleImage40!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 40, height: 40), false, 0)
            TaskStudioStyleKit.drawIcon_titleImage40()

        Cache.imageOfIcon_titleImage40 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfIcon_titleImage40!
    }

    public dynamic class var imageOfTasks_25: UIImage {
        if Cache.imageOfTasks_25 != nil {
            return Cache.imageOfTasks_25!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            TaskStudioStyleKit.drawTasks_25()

        Cache.imageOfTasks_25 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfTasks_25!
    }

    public dynamic class var imageOfSpeech_bubble_25: UIImage {
        if Cache.imageOfSpeech_bubble_25 != nil {
            return Cache.imageOfSpeech_bubble_25!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            TaskStudioStyleKit.drawSpeech_bubble_25()

        Cache.imageOfSpeech_bubble_25 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSpeech_bubble_25!
    }

    public dynamic class var imageOfSettings_25: UIImage {
        if Cache.imageOfSettings_25 != nil {
            return Cache.imageOfSettings_25!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            TaskStudioStyleKit.drawSettings_25()

        Cache.imageOfSettings_25 = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSettings_25!
    }

    public dynamic class var imageOfTasks_selected: UIImage {
        if Cache.imageOfTasks_selected != nil {
            return Cache.imageOfTasks_selected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            TaskStudioStyleKit.drawTasks_selected()

        Cache.imageOfTasks_selected = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfTasks_selected!
    }

    public dynamic class var imageOfSettings_selected: UIImage {
        if Cache.imageOfSettings_selected != nil {
            return Cache.imageOfSettings_selected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            TaskStudioStyleKit.drawSettings_selected()

        Cache.imageOfSettings_selected = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSettings_selected!
    }

    public dynamic class var imageOfSpeech_bubble_selected: UIImage {
        if Cache.imageOfSpeech_bubble_selected != nil {
            return Cache.imageOfSpeech_bubble_selected!
        }

        UIGraphicsBeginImageContextWithOptions(CGSize(width: 30, height: 30), false, 0)
            TaskStudioStyleKit.drawSpeech_bubble_selected()

        Cache.imageOfSpeech_bubble_selected = UIGraphicsGetImageFromCurrentImageContext()!
        UIGraphicsEndImageContext()

        return Cache.imageOfSpeech_bubble_selected!
    }

    //// Customization Infrastructure

    @IBOutlet dynamic var icon_titleImageTargets: [AnyObject]! {
        get { return Cache.icon_titleImageTargets }
        set {
            Cache.icon_titleImageTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TaskStudioStyleKit.imageOfIcon_titleImage)
            }
        }
    }

    @IBOutlet dynamic var icon_titleImage40Targets: [AnyObject]! {
        get { return Cache.icon_titleImage40Targets }
        set {
            Cache.icon_titleImage40Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TaskStudioStyleKit.imageOfIcon_titleImage40)
            }
        }
    }

    @IBOutlet dynamic var tasks_25Targets: [AnyObject]! {
        get { return Cache.tasks_25Targets }
        set {
            Cache.tasks_25Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TaskStudioStyleKit.imageOfTasks_25)
            }
        }
    }

    @IBOutlet dynamic var speech_bubble_25Targets: [AnyObject]! {
        get { return Cache.speech_bubble_25Targets }
        set {
            Cache.speech_bubble_25Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TaskStudioStyleKit.imageOfSpeech_bubble_25)
            }
        }
    }

    @IBOutlet dynamic var settings_25Targets: [AnyObject]! {
        get { return Cache.settings_25Targets }
        set {
            Cache.settings_25Targets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TaskStudioStyleKit.imageOfSettings_25)
            }
        }
    }

    @IBOutlet dynamic var tasks_selectedTargets: [AnyObject]! {
        get { return Cache.tasks_selectedTargets }
        set {
            Cache.tasks_selectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TaskStudioStyleKit.imageOfTasks_selected)
            }
        }
    }

    @IBOutlet dynamic var settings_selectedTargets: [AnyObject]! {
        get { return Cache.settings_selectedTargets }
        set {
            Cache.settings_selectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TaskStudioStyleKit.imageOfSettings_selected)
            }
        }
    }

    @IBOutlet dynamic var speech_bubble_selectedTargets: [AnyObject]! {
        get { return Cache.speech_bubble_selectedTargets }
        set {
            Cache.speech_bubble_selectedTargets = newValue
            for target: AnyObject in newValue {
                let _ = target.perform(NSSelectorFromString("setImage:"), with: TaskStudioStyleKit.imageOfSpeech_bubble_selected)
            }
        }
    }




    @objc public enum ResizingBehavior: Int {
        case aspectFit /// The content is proportionally resized to fit into the target rectangle.
        case aspectFill /// The content is proportionally resized to completely fill the target rectangle.
        case stretch /// The content is stretched to match the entire target rectangle.
        case center /// The content is centered in the target rectangle, but it is NOT resized.

        public func apply(rect: CGRect, target: CGRect) -> CGRect {
            if rect == target || target == CGRect.zero {
                return rect
            }

            var scales = CGSize.zero
            scales.width = abs(target.width / rect.width)
            scales.height = abs(target.height / rect.height)

            switch self {
                case .aspectFit:
                    scales.width = min(scales.width, scales.height)
                    scales.height = scales.width
                case .aspectFill:
                    scales.width = max(scales.width, scales.height)
                    scales.height = scales.width
                case .stretch:
                    break
                case .center:
                    scales.width = 1
                    scales.height = 1
            }

            var result = rect.standardized
            result.size.width *= scales.width
            result.size.height *= scales.height
            result.origin.x = target.minX + (target.width - result.width) / 2
            result.origin.y = target.minY + (target.height - result.height) / 2
            return result
        }
    }
}
